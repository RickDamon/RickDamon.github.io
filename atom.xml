<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RickDamon</title>
  
  <subtitle>Welcome!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-03T09:10:07.280Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>RickDamon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>金字塔原理</title>
    <link href="http://example.com/2022/01/03/jin-zi-ta-yuan-li-du-hou-gan/"/>
    <id>http://example.com/2022/01/03/jin-zi-ta-yuan-li-du-hou-gan/</id>
    <published>2022-01-02T16:00:00.000Z</published>
    <updated>2022-01-03T09:10:07.280Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;金字塔原理，书的目的是希望读者使用金字塔原理进行思考沟通及解决问题，提高逻辑性及条理性，掌握表达的标准结构及规范进而使得沟通准确高效。&lt;/p&gt;
&lt;p&gt; </summary>
        
      
    
    
    
    
    <category term="软技能" scheme="http://example.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>SRE实战读书笔记</title>
    <link href="http://example.com/2021/12/25/sre-shi-zhan-du-shu-bi-ji/"/>
    <id>http://example.com/2021/12/25/sre-shi-zhan-du-shu-bi-ji/</id>
    <published>2021-12-24T16:00:00.000Z</published>
    <updated>2021-12-28T09:02:18.235Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;SRE的概念&quot;&gt;&lt;a href=&quot;#SRE的概念&quot; class=&quot;headerlink&quot; title=&quot;SRE的概念&quot;&gt;&lt;/a&gt;SRE的概念&lt;/h3&gt;&lt;p&gt;  </summary>
        
      
    
    
    
    
    <category term="SRE" scheme="http://example.com/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>Golang中通讯</title>
    <link href="http://example.com/2021/12/12/go-tong-xun/"/>
    <id>http://example.com/2021/12/12/go-tong-xun/</id>
    <published>2021-12-11T16:00:00.000Z</published>
    <updated>2021-12-12T14:05:23.579Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Go 中，从文件读取（或写入）是非常容易的。程序只需要使用 os 包就可以从文件&lt;br&gt;/etc/passwd 中读取数据。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>对golang并发的简单阐述</title>
    <link href="http://example.com/2021/11/28/go-goroutine/"/>
    <id>http://example.com/2021/11/28/go-goroutine/</id>
    <published>2021-11-27T16:00:00.000Z</published>
    <updated>2021-11-28T10:41:35.091Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;goroutine的简单使用&quot;&gt;&lt;a href=&quot;#goroutine的简单使用&quot; class=&quot;headerlink&quot; title=&quot;goroutine的简单使用&quot;&gt;&lt;/a&gt;goroutine的简单使用&lt;/h3&gt;&lt;p&gt;goroutine 是</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>SLO及SLI的基本定义</title>
    <link href="http://example.com/2021/11/21/sli-slo-sla/"/>
    <id>http://example.com/2021/11/21/sli-slo-sla/</id>
    <published>2021-11-20T16:00:00.000Z</published>
    <updated>2021-11-21T06:03:49.086Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;SLO及SLI的基本定义&quot;&gt;&lt;a href=&quot;#SLO及SLI的基本定义&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="SRE" scheme="http://example.com/tags/SRE/"/>
    
  </entry>
  
  <entry>
    <title>TraceSim算法概述</title>
    <link href="http://example.com/2021/11/05/tracesim-read/"/>
    <id>http://example.com/2021/11/05/tracesim-read/</id>
    <published>2021-11-04T16:00:00.000Z</published>
    <updated>2021-11-05T12:54:38.124Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本篇博客是针对TraceSim: A Method for Calculating Stack Trace Similarity的阅读。&lt;/p&gt;
&lt;p&gt;在本文中提出了一个新的计算堆栈跟踪相似性的算法，该算法结合了TF-IDF和Levenshtein</summary>
        
      
    
    
    
    
    <category term="Paper" scheme="http://example.com/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>ReBucket论文精读</title>
    <link href="http://example.com/2021/11/03/rebucket-paper-reading/"/>
    <id>http://example.com/2021/11/03/rebucket-paper-reading/</id>
    <published>2021-11-02T16:00:00.000Z</published>
    <updated>2021-11-05T12:52:00.015Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;本篇文章是对缺陷分析算法相关论文ReBucket A method for clustering duplicate crash reports based on call stack similarity的精读。&lt;/p&gt;
&lt;p&gt;论文原链接：&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    
    <category term="Paper" scheme="http://example.com/tags/Paper/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的interface</title>
    <link href="http://example.com/2021/10/31/go-interface/"/>
    <id>http://example.com/2021/10/31/go-interface/</id>
    <published>2021-10-30T16:00:00.000Z</published>
    <updated>2021-10-31T07:31:48.052Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Go 中，关键字 interface 被赋予了多种不同的含义。每个类型都有接口，意味着对那个类型定义了方法集合 。如下这段代码定义了具有一个字段和两个方法的结构类型 S。&lt;/p&gt;
&lt;pre class=&quot;line-numbers</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang中类型转换</title>
    <link href="http://example.com/2021/10/24/go-typechange/"/>
    <id>http://example.com/2021/10/24/go-typechange/</id>
    <published>2021-10-23T16:00:00.000Z</published>
    <updated>2021-10-24T06:11:38.924Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;有时需要将一个类型转换为另一个类型。在 Go 中可以做到，当然有一些特定规则。首先，将一个值转换为另一个是由操作符（看起来像是函数：byte()）完成的，而并且不是所有的转换都是允许的。&lt;/p&gt;
&lt;p&gt;从 string 到字节或者 ruin 的</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang中自定义类型</title>
    <link href="http://example.com/2021/10/16/go-type/"/>
    <id>http://example.com/2021/10/16/go-type/</id>
    <published>2021-10-15T16:00:00.000Z</published>
    <updated>2021-10-16T10:18:01.660Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Go 允许定义新的类型，可以通过关键字 type 实现：&lt;br&gt;type foo int&lt;br&gt;如上我们创建了一个新的类型 foo 作用跟 int 一样。创建更加复杂的类型需要用到 struct</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的指针及内存分配</title>
    <link href="http://example.com/2021/10/10/go-point/"/>
    <id>http://example.com/2021/10/10/go-point/</id>
    <published>2021-10-09T16:00:00.000Z</published>
    <updated>2021-10-10T07:03:50.626Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;p&gt;Go 有指针。然而却没有指针运算，因此它们更像是引用而不是我们所知道的来自于 C的指针。指针非常有用。在 Go</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang中的延迟代码</title>
    <link href="http://example.com/2021/09/30/go-defer/"/>
    <id>http://example.com/2021/09/30/go-defer/</id>
    <published>2021-09-29T16:00:00.000Z</published>
    <updated>2021-10-31T07:32:35.851Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;GO语言中，defer代码块会在函数调用链表中增加一个函数调用，这个函数调用是发生在return</summary>
        
      
    
    
    
    
    <category term="Golang" scheme="http://example.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>循环展开</title>
    <link href="http://example.com/2021/09/25/loop-unwinding/"/>
    <id>http://example.com/2021/09/25/loop-unwinding/</id>
    <published>2021-09-24T16:00:00.000Z</published>
    <updated>2021-09-25T08:42:39.848Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;循环展开是一种程序变换，通过增加每次迭代计算的元素数量，减少循环的迭代次数，在之前的程序优化中有函数用到循环展开。循环展开能从两个方面改进程序的性能。首先，它减少了不直接有助于程序结果的操作的数量，例如循环索引计算和条件分支。第二，它提供了一些方法，可以进一步变化代码，减少</summary>
        
      
    
    
    
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>关于程序的性能优化-part2</title>
    <link href="http://example.com/2021/09/18/program-performance-optimization2/"/>
    <id>http://example.com/2021/09/18/program-performance-optimization2/</id>
    <published>2021-09-17T16:00:00.000Z</published>
    <updated>2021-09-18T10:27:38.060Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>联邦学习</title>
    <link href="http://example.com/2021/09/11/federatedlearning1/"/>
    <id>http://example.com/2021/09/11/federatedlearning1/</id>
    <published>2021-09-10T16:00:00.000Z</published>
    <updated>2021-09-11T08:19:01.091Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;使用FATE框架开始联邦学习之路&quot;&gt;&lt;a href=&quot;#使用FATE框架开始联邦学习之路&quot; class=&quot;headerlink&quot; title=&quot;使用FATE框架开始联邦学习之路&quot;&gt;&lt;/a&gt;使用FATE框架开始联邦学习之路&lt;/h2&gt;&lt;h3</summary>
        
      
    
    
    
    
    <category term="deeplearning" scheme="http://example.com/tags/deeplearning/"/>
    
  </entry>
  
  <entry>
    <title>关于程序的性能优化-part1</title>
    <link href="http://example.com/2021/09/04/program-performance-optimization1/"/>
    <id>http://example.com/2021/09/04/program-performance-optimization1/</id>
    <published>2021-09-03T16:00:00.000Z</published>
    <updated>2021-09-04T08:16:13.833Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;编写高效程序需要注意&quot;&gt;&lt;a href=&quot;#编写高效程序需要注意&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="os" scheme="http://example.com/tags/os/"/>
    
  </entry>
  
  <entry>
    <title>whosbug</title>
    <link href="http://example.com/2021/08/30/guan-yu/"/>
    <id>http://example.com/2021/08/30/guan-yu/</id>
    <published>2021-08-29T16:00:00.000Z</published>
    <updated>2021-10-20T05:48:48.665Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;whosbug项目总结&quot;&gt;&lt;a href=&quot;#whosbug项目总结&quot; class=&quot;headerlink&quot; title=&quot;whosbug项目总结&quot;&gt;&lt;/a&gt;whosbug项目总结&lt;/h3&gt;&lt;p&gt; </summary>
        
      
    
    
    
    
    <category term="whosbug" scheme="http://example.com/tags/whosbug/"/>
    
  </entry>
  
  <entry>
    <title>缺陷引入分析技术相关之SZZ算法</title>
    <link href="http://example.com/2021/08/21/szz/"/>
    <id>http://example.com/2021/08/21/szz/</id>
    <published>2021-08-20T16:00:00.000Z</published>
    <updated>2021-08-21T15:08:28.922Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;此算法来源于2005年由瑞典德隆大学的一篇论文《When Do Changes Induce Fixes》，作者分别名为Jacek Sliwerski,Thomas Zimmermann,Andreas</summary>
        
      
    
    
    
    
    <category term="技术分享" scheme="http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>whosbug前置学习5</title>
    <link href="http://example.com/2021/08/14/whosbug5/"/>
    <id>http://example.com/2021/08/14/whosbug5/</id>
    <published>2021-08-13T16:00:00.000Z</published>
    <updated>2021-08-14T06:01:58.528Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;2021-8-7&quot;&gt;&lt;a href=&quot;#2021-8-7&quot; class=&quot;headerlink&quot; title=&quot;2021/8/7&quot;&gt;&lt;/a&gt;2021/8/7&lt;/h2&gt;&lt;p&gt;有通过本地部署服务器的端口 &lt;a</summary>
        
      
    
    
    
    
    <category term="whosbug" scheme="http://example.com/tags/whosbug/"/>
    
  </entry>
  
  <entry>
    <title>whosbug前置学习4</title>
    <link href="http://example.com/2021/08/07/whosbug4/"/>
    <id>http://example.com/2021/08/07/whosbug4/</id>
    <published>2021-08-06T16:00:00.000Z</published>
    <updated>2021-08-07T06:12:22.984Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;2021-8-1&quot;&gt;&lt;a href=&quot;#2021-8-1&quot; class=&quot;headerlink&quot; title=&quot;2021/8/1&quot;&gt;&lt;/a&gt;2021/8/1&lt;/h2&gt;&lt;p&gt;了解学习gevent第三方用于python并发的库&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    
    <category term="whosbug" scheme="http://example.com/tags/whosbug/"/>
    
  </entry>
  
</feed>
