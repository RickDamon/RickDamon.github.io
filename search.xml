<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java_learning_1</title>
      <link href="/2021/06/26/article-title/"/>
      <url>/2021/06/26/article-title/</url>
      
        <content type="html"><![CDATA[<h3 id="Java核心技术一卷学习笔记（1）"><a href="#Java核心技术一卷学习笔记（1）" class="headerlink" title="Java核心技术一卷学习笔记（1）"></a>Java核心技术一卷学习笔记（1）</h3><p>课内关于Java学习的内容安排过于少且仓促，俗话说大学都是师傅领进门，修行靠个人，为加强Java语言的编程以及Debug能力，用Java核心技术卷一二以及深入理解Java虚拟机来补充相应知识空缺。</p><h3 id="第一章-Java程序设计概述"><a href="#第一章-Java程序设计概述" class="headerlink" title="第一章 Java程序设计概述"></a>第一章 Java程序设计概述</h3><p>本章是对Java语言的引入介绍，这里放上Java程序设计者对于其设计初衷以及完成情况的白皮书 <a href="www.oracle.com/technetwork/java/langenv-140151.html">Java white paper</a><br>关于关键数术语的概述 <a href="http://horstmann.com/corejava/java-an-overview/7Gosling.pdf">key words</a> </p><p>Java的十一个关键术语为：</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### 简单性</span></span><br><span class="line"></span><br><span class="line">此处主要是相对C++语言来说，Java的设计者们希望构建一个无需深奥的专业训练就可以进行编程的系统，且符合当今的标准惯例，Java提出了C++中很多较少使用，且难以处理的、容易被混淆的特性。</span><br><span class="line"></span><br><span class="line">Java语法可以理解为C++语法的一个纯净版本，没有头文件，指针操作，结构，联合，操作符重载，虚基类等待。当然也有一些不适当特性的存在，比如switch语法在Java没有什么改变。</span><br><span class="line"></span><br><span class="line">简单的另一个方面便是小，Java设计者希望Java可以支持开发能够在小型机器上独立运行的软件，在发布时，基本的解释器以及类支持大约为40KB，加上标准类库以及线上支持，大约需要增加170KB，这在当时已经是一个不错的成就。</span><br><span class="line"></span><br><span class="line"><span class="section">## Java的面向对象</span></span><br><span class="line"></span><br><span class="line">在设计者开发Java语言时，面向对象技术已经很成熟，Java面向对象的特性与C++旗鼓相当，Java与其不同点在于多重继承，Java中使用了更简单的接口概念。Java也提供了更丰富的运行时自省功能。</span><br><span class="line"></span><br><span class="line"><span class="section">## 分布式</span></span><br><span class="line"></span><br><span class="line">Java由一个丰富的例程库支持处理像HTTP和FTP类的TCP/IP协议。</span><br><span class="line"></span><br><span class="line">Java应用程序可通过URL打开和访问网络上的对象。</span><br><span class="line"></span><br><span class="line"><span class="section">## 健壮性</span></span><br><span class="line"></span><br><span class="line">Java因为取消了指针的使用，采用指针模型，消除了重写内存和损坏数据的可能性。</span><br><span class="line"></span><br><span class="line"><span class="section">## 安全性</span></span><br><span class="line"></span><br><span class="line">从一开始Java就可以防范类似于运行时堆栈溢出（蠕虫和病毒常用手段），破坏自己的进程空间之外的内存，未经授权读写文件等问题。 </span><br><span class="line"></span><br><span class="line">不可信代码在一个沙河环境中执行，不会影响主系统。</span><br><span class="line"></span><br><span class="line"><span class="section">## 体系结构中立</span></span><br><span class="line"></span><br><span class="line">因为Java虚拟机的存在，编译器生成一个体系结构中立的目标文件格式，可在多种处理器上运行。</span><br><span class="line"></span><br><span class="line"><span class="section">## 可移植性</span></span><br><span class="line"></span><br><span class="line">在Java中，数值类型有固定的字节数，消除了代码移植时的主要问题，字符串通过Unicode格式存储。</span><br><span class="line"></span><br><span class="line"><span class="section">## 解释性</span></span><br><span class="line"></span><br><span class="line">Java解释器可以在任何抑制了解释器的机器上直接执行Java字节码。</span><br><span class="line"></span><br><span class="line"><span class="section">## 高性能</span></span><br><span class="line"></span><br><span class="line">字节码可以在运行时动态的转换成对应运行这个应用特定CPU的机器码</span><br><span class="line"></span><br><span class="line"><span class="section">## 多线程</span></span><br><span class="line"></span><br><span class="line">Java是第一个支持并发设计的主流语言。</span><br><span class="line"></span><br><span class="line"><span class="section">## 动态性</span></span><br><span class="line"></span><br><span class="line">Java库中可以自由添加新方法和实例变量，而对客户端没影响。</span><br></pre></td></tr></tbody></table></figure><h3 id="Java语言发展简史"><a href="#Java语言发展简史" class="headerlink" title="Java语言发展简史"></a>Java语言发展简史</h3><p>Java的历史要追溯到1991年，由Patrick Naughton和James Gosling（一个全能的计算机奇才，Sun公司会士）带领的Sun公司的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器（CPU），因此很重要的一点是这种语言不应与任何特定的体系结构绑定。这个项目被命名为“Green”。</p><p>代码短小、紧凑且与平台无关，这些要求促使开发团队设计出一个可移植的语言，可以为虚拟机生成中间代码。</p><p>不过，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础，而不是Lisp、Smalltalk或Pascal。不过，就像Gosling在专访中谈道：“毕竟，语言只是实现目标的工具，而不是目标本身。”Gosling把这种语言称为“Oak”（这么起名大概是因为他非常喜欢自己办公室窗外的一棵橡树）。Sun公司的人后来发现，Oak是一种已有的计算机语言的名字，于是，将其改名为Java。事实证明这是一个很有灵感的选择。</p><p>1992年，Green项目发布了它的第一个产品，称之为“*7”。这个产品可以提供非常智能的远程控制。遗憾的是，Sun公司对生产这个产品并不感兴趣，Green项目组的人员必须找出其他的方法来将他们的技术推向市场。然而，仍然没有任何一家标准消费品电子公司对此感兴趣。于是，Green项目组投标了一个设计有线电视盒的项目，它能提供视频点播等新型有线服务，但他们没能拿到这个合同（有趣的是，得到这个项目的公司的领导恰恰是开创Netscape公司的Jim Clark。Netscape公司后来对Java的成功给予了很大的帮助）。</p><p>Green项目（这时换了一个新名字—“First Person公司”）在1993年一整年以及1994年的上半年，一直在苦苦寻求买家购买他们的技术。然而，一个也没有找到（Patrick Naughton—项目组的创始人之一，也是完成大多数营销工作的人，声称为了销售这项技术，已累计飞行了300000英里）。1994年First Person公司解散了。</p><p>当这一切在Sun公司发生的时候，Internet的万维网也在日渐发展壮大。万维网的关键是浏览器把超文本页面转换到屏幕上。1994年大多数人都在使用Mosaic，这是1993年出自伊利诺伊大学超级计算中心的一个非商业化的Web浏览器（Mosaic的一部分是由Marc Andreessen编写的。当时，他作为一名参加半工半读项目的本科生，编写了这个软件，每小时的薪水只有6.85美元。他后来成了Netscape公司的创始人之一和技术总监，可谓名利双收）。</p><p>在接受SunWorld采访的时候，Gosling说，在1994年中期，Java语言的开发者意识到：“我们能够建立一个相当酷的浏览器。在客户/服务器主流框架中，浏览器恰好需要我们已经完成的一些工作：体系结构中立、实时、可靠、安全—这些问题在工作站环境并不太重要，所以，我们决定开发浏览器。”</p><p>实际的浏览器是由Patrick Naughton和Jonathan Payne开发的，并演变为HotJava浏览器。HotJava浏览器采用Java编写，以炫耀Java语言超强的能力。这个浏览器能够在网页中执行内嵌的Java代码。这一“技术证明”在1995年5月23日的SunWorld’95大会上展示，同时引发了人们延续至今的对Java的狂热追逐。</p><p>1996年年初，Sun发布了Java的第1个版本。人们很快地意识到Java 1.0不能用来进行真正的应用开发。的确，可以使用Java 1.0来实现在画布上随机跳动的神经质的文本applet，但它却没有提供打印功能。坦率地说，Java 1.0的确没有为其黄金时期的到来做好准备。后来的Java 1.1弥补了其中的大多明显的缺陷，大大改进了反射能力，并为GUI编程增加了新的事件处理模型。不过它仍然有很大的局限性。</p><p>1998年JavaOne会议的头号新闻是即将发布Java 1.2版。这个版本将早期玩具式的GUI和图形工具包代之以复杂而且可伸缩的工具包。在1998年12月Java 1.2发布仅3天之后，Sun公司市场部将它改名为更加吸引人的“Java 2标准版软件开发包1.2版”。</p><p>除了“标准版”（Standard Edition）之外，Sun公司还推出了两个其他的版本：一个是用于手机等嵌入式设备的“微型版”（Micro Edition）；另一个是用于服务器端处理的“企业版”（Enterprise Edition）。本书主要介绍标准版。</p><p>标准版的1.3和1.4版本对最初的Java 2版本做出了增量式的改进，提供了不断扩展的标准类库，提高了性能，当然，还修正了一些bug。在此期间，原先对Java applet和客户端应用的炒作逐渐消退，但Java则成为服务器端应用的首选平台。</p><p>5.0版是自1.1版以来第一个对Java语言做出重大改进的版本（这一版本原来定为1.5版，在2004年的JavaOne会议之后，版本号直接升至5.0）。经过了多年的研究，这个版本添加了泛型类型（generic type，大致相当于C++的模板），其挑战性在于添加这一特性而不需要对虚拟机做出任何修改。另外，受到C#的启发，还增加了几个很有用的语言特性：“for each”循环、自动装箱和注解。</p><p>版本6（没有后缀.0）于2006年年末发布。同样，这个版本没有对语言方面再进行修改，而是做了其他性能改进，并增强了类库。</p><p>随着数据中心越来越依赖于商业硬件而不是专用服务器，Sun公司终于沦陷，于2009年被Oracle收购。Java的开发停滞了很长一段时间。直到2011年Oracle发布了Java的一个新版本—Java 7，其中只做了一些简单的改进。</p><p>2014年，Java 8终于发布，在近20年中这个版本发生的改变最大。Java 8包含了一种“函数式”编程方式，可以很容易地表述并发执行的计算。所有编程语言都必须与时俱进，Java在这方面显示出了非凡的能力。</p><p>Java 9的主要特性要一直追溯到2008年。那时，Java平台的首席工程师Mark Reinhold开始着力分解这个庞大的Java平台。为此引入了模块，模块是提供一个特定功能的自包含的代码单元。设计和实现一个适用于Java平台的模块系统前后用了11年，而它是否也适用于Java应用和类库还有待观察。Java 9于2017年发布，它提供了另外一些吸引人的特性，我们将在本书中介绍这些特性。</p><p>从2018年开始，每6个月就会发布一个Java版本，以支持更快地引入新特性。某些版本（如Java 11）设计为长期支持的版本。</p><p>此部分先到这里。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/06/26/hello-world/"/>
      <url>/2021/06/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java_learning_2</title>
      <link href="/2021/06/26/java-learning-2/"/>
      <url>/2021/06/26/java-learning-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Java核心技术卷一-学习笔记（2）"><a href="#Java核心技术卷一-学习笔记（2）" class="headerlink" title="Java核心技术卷一 学习笔记（2）"></a>Java核心技术卷一 学习笔记（2）</h3><p>在书中的第二章节是Java编程环境的搭建以及jdk的下载，ide的配置等，这些内容基本没有什么好说的，直接看第三章的Java基本的程序设计结构，这章的内</p><p>容实际上是比较关键的，虽然看似较为简单，但涉及到了java语言的基本规范，编译过程，数据类型等，这些东西每个语言都有所区别，不能因为有一定基础</p><p>就跳过或略读。</p><h2 id="最简单的Java程序分析"><a href="#最简单的Java程序分析" class="headerlink" title="最简单的Java程序分析"></a>最简单的Java程序分析</h2><p>下面贴一最简单的Java程序，只发送一条消息到控制台</p> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public class FirstSample{    public static void main(String[] args)    {         System.out.println("We will not use 'hello world!' ");    }}   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个程序虽然很简单，但如我们所知，所有Java程序都有此结构，现在我们逐行来细细研究一下：</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>关键字public称为访问修饰符（access modifier），用于控制程序的其他部分对这段代码的访问级别，和C++中类中的定义是十分相似的。而关键字class表明</p><p>了Java程序中全部内容都包含在类中，在Java语言中，类是构建所有Java程序和applet的构建块，Java的全部内容都需放在类中。</p><p>class后跟类名。Java中类名的定义必须由字母开头，后面可以跟字母和数字的组合，长度没有什么限制，但不能用Java的保留字。</p><p>Java类的标准命名规范为<a href="https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95/7794053?fr=aladdin">骆驼命名法</a> </p><p>Java中源代码的文件名必须与公共类的名字相同，并且使用.java作为扩展名。</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>在编译过程中，以上面程序为例，在编译这段代码之后会得到一个包含这个类字节码的文件，java编译器会将字节码文件命名为FirstSample.class，并存储在</p><p>源文件的同一目录下，编译完后可以使用 java FirstSample运行此程序，当然运行结果会是一段我们输入的字符。</p><h2 id="java中的一些规范"><a href="#java中的一些规范" class="headerlink" title="java中的一些规范"></a>java中的一些规范</h2><p>运行已编译的程序时，Java虚拟机总是会从指定的类中的main方法的代码开始执行，所以在类的源文件中必须有一个main方法，且根据(Java语言规范)[<a href="http://docs.oracle.com/javase/specs],main%E6%96%B9%E6%B3%95%E5%BF%85%E9%A1%BB%E5%A3%B0%E6%98%8E%E4%B8%BApublic%E3%80%82">http://docs.oracle.com/javase/specs],main方法必须声明为public。</a></p><p>且在Java语言中，和在C++中一样，用大括号来划分程序部分。</p><p>作为学习过C++程序的一员，对Java类的理解应该会好理解一下，Java的所有函数都是某个类的方法。因此，Java的main方法必须有一个shell类。</p><p>Java中的main方法必须是静态的，void类型表示没有返回值，所以不用返回退出码。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public static void main(String[] args)   {        System.out.println("We will not use 'hello world!' ");   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>现在对这个语句进行研究：</p><p>在这里我们使用了System.out对象且调用了它的println方法。注意，点号（.）用于调用方法，Java中通用的调用为object.method(parameters)。和C++一</p><p>样，都是用双引号界定字符串。注释也是很类似的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java中有八种基本的数据类型，其中4种整型，2种浮点类型，一种字符类型char，和判断值boolean类型。</p><h1 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h1><p>Java中提供了四种整形，即int，short，long，byte，其中int类型最为常用，而要表达地球人口这样的较大数就需要用到long类型，而byte和short常用于特<br>定的场合，比如底层文件处理或者存储空间很宝贵的大数据。</p><p>在C和C++中，int和long等类型的大小与目标平台相关。而Java中所有数值类型所占字节数与平台无关。且Java没有任何unsigned的int，long，short或byte<br>类型。</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p>Java中有两种浮点类型为float和double分别占4字节和8字节。double所表示的数值精度为float的两倍。</p><p>浮点数不适用于无法接受舍入误差的金融运算，如果在数值计算中不允许有任何舍入误差，应使用BigDecimal类。</p><h1 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h1><p>此类型原本用于表示单个字符，不过在如今有些Unicode字符可以用一个char值来描述，有些则需两个char值。</p><p>char类型的字面量值要用单引号括起来，例如’A’为编码值为65的字符常量。与”A”不同，这是一个包含字符A的字符串。</p><h1 id="Unicode和char类型"><a href="#Unicode和char类型" class="headerlink" title="Unicode和char类型"></a>Unicode和char类型</h1><p>Unicode打破了传统的字符编码机制的限制，在其出现之前各国有许多不同的标准，就产生了两个问题：</p><p>1.对于任意给定的代码值，在不同编码方案下可能对应不同的字母；</p><p>2.采用大字符集的语言其编码长度可能有所不同。</p><p>设计Unicode的初衷便是要解决这些问题。当时人们认为两个字节的代码宽度足以对世界上任何语言的所有字符进行编码，但最终还是因为大量的汉语系文字<br>中的表意文字，目前16位的char类型已无法满足描述所有Unicode字符的需要。</p><h1 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h1><p>包括两个值true和false，来判定逻辑条件，整型和布尔值不能进行相互转换。</p><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>和C++类似，Java也用变量来存储值，常量就是值不变的变量，通常会用final修饰。</p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>当变量的取值只在一个有限的集合内，可以自定义枚举类型。枚举类型包括有限个命名的值。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">enum Size { SMALL , MEDIUM , LARGE , EXRA_LARGE};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后会进行枚举类的详细介绍。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p>此处与其他语言类似，而要注意使用strictfp关键字标记的方法必须使用严格的浮点运算来生成可再生的结果。</p><h1 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h1><p>在Math类中，包含了各种各样的数学函数。在编写不同类型的程序时，可能需要的函数也不同。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">double x = 4 ;double y = Math.sqrt(x) ;System.out.println(y) ; //prints 2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上位Math应用的举例。使用更多其中的功能可参考Java对应版本的API文档。</p><h1 id="数值类型间的转换"><a href="#数值类型间的转换" class="headerlink" title="数值类型间的转换"></a>数值类型间的转换</h1><p>当用一个二元运算符连接两个值时，要将两操作数转为一种类型再进行计算。</p><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>有时将double转为int时会丢失信息，这种转换要通过强制类型转换（cast）来完成，强制类型转换语法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">double x = 4.99 ;int n = (int) x ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结合复制和运算符"><a href="#结合复制和运算符" class="headerlink" title="结合复制和运算符"></a>结合复制和运算符</h1><p>此处与C++类似，举个栗子，x+=4；大家大概就明白意思了。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
