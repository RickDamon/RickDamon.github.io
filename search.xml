<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SLO及SLI的基本定义</title>
      <link href="/2021/11/21/sli-slo-sla/"/>
      <url>/2021/11/21/sli-slo-sla/</url>
      
        <content type="html"><![CDATA[<h2 id="SLO及SLI的基本定义"><a href="#SLO及SLI的基本定义" class="headerlink" title="SLO及SLI的基本定义"></a>SLO及SLI的基本定义</h2><p>确保应用程序可用性的很大部分是在建立和监控服务级别指标(service-level metrics)上,service-level在商业级别上主要指的是SLA，而在SRE的规划和事件中会使用SLO和SLI，这里的A，O，I指的是Objective，Agreement以及indicator。</p><h3 id="SLO"><a href="#SLO" class="headerlink" title="SLO"></a>SLO</h3><p>SLO指的是每个服务的用户可接受的最低可靠性级别，通过这项数据，团队就可以决定是要将服务变得更加可靠，还是降低其可靠性进行一个原则性的判断，因为越可靠往往意味着运营成本越高，这就是SLO对于开发团队的作用。</p><h3 id="SLA"><a href="#SLA" class="headerlink" title="SLA"></a>SLA</h3><p>而SLA相对于SLO来说，通常涉及到对服务用户的承诺，即服务可用性SLO应该在特定的时期达到一个特定的级别，之前有说过SLA是商业级别的，那么达不到对用户的承诺的话，必然也会导致某种惩罚，一般都是经济性的。通常是向客户收费的服务涉及到SLA，在whosbug中SLA应该是用不太上的。</p><h3 id="SLI"><a href="#SLI" class="headerlink" title="SLI"></a>SLI</h3><p>SLI就是一个对于服务行为的直接衡量了，定义为系统成功探测的频率，当我们去评估过去一周内我们的系统是否在SLO内运行时，会查看SLI来得到服务可用性的百分比，如果低于定义的SLO，那说明系统有问题，需要去提升系统的可用性了。whosbug中的需要关注的则是SLI与SLO。</p><p>通俗一点来讲，SLI指的是服务等级指标，即QPS，响应时间等，而SLO是对SLI中指标设立的目标，即QPS要达到99.99%,响应时间应该为10ms等。</p><h2 id="SLI及SLO的具体设计"><a href="#SLI及SLO的具体设计" class="headerlink" title="SLI及SLO的具体设计"></a>SLI及SLO的具体设计</h2><p>那么理解了概念之后，常见的指标又有很多，系统层面包括了CPU的使用率，内存的使用率，磁盘使用率，在应用服务器层面包括了端口的存活状态，而应用运行的层面也包括状态码，时延等等。我们的选择主要遵循两个原则:</p><ul><li><p>选择能够标识一个主体是否稳定的目标，如果不是主体本身的指标，或是不能标识主题稳定性的就需要排除在外。</p></li><li><p>选择些用户可以感知到的指标，比如whosbug中传入数据库或是get责任人的状态码返回可以作为指标。</p></li></ul><p>也就是说选择指标基本上是给两个群体去看的，一个是运维，一个是客户，前者是为了了解整个系统的运转状态，后者则是使用体验。</p><p>标准化一点可以套用《谷歌SRE工作手册》的方法:VALET,即Volume、Availability、Latency、Error和Ticket。这五个单词就是谷歌推荐我们选择的五个指标。</p><h3 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h3><p>Volume指的是容量，也就是常来衡量吞吐量的QPS和TPS等等。</p><h3 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a>Availability</h3><p>Availability即可用性，他不是一个直接得到的概念，与之相关的定义有MTBF(Mean Time Between Failure)和MTTR(Mean Time To Repair)，平均故障间隔和平均恢复时间，前者越长即系统正常运转的平均时间越长，那么代表系统的稳定性越高；后者是对事故处理的时间，此值越小代表了故障对于用户的影响越小，Availability的计算为:<br>Availability = MTBF / (MTBF + MTTR) ，计算结果是一个百分数来作为SLO的值。</p><h3 id="Latency"><a href="#Latency" class="headerlink" title="Latency"></a>Latency</h3><p>Latency即延迟，这个反应的就是响应是否够快，如果是一个任务类的作业，我们会看每个任务是否在规定的时间完成了。通常对于时延这个指标，我们不会直接做所有请求时延的平均，因为整个时延的分布也符合正态分布，所以通常会以类似“90% 请求的时延 &lt;= 80ms，或者 95% 请求的时延 &lt;=120ms ”这样的方式来设定时延 SLO，数理统计中，这个 90% 或 95% 称之为置信区间。这样选择的原因也是因为不排除很多请求从业务逻辑层面是不成功的，这时业务逻辑的处理时长就会非常短（可能 10ms），或者出现 404 这样的状态码（可能就 1ms）。从可用性来讲，这些请求也算成功，但是这样的请求会拉低整个均值。</p><p>Latency的延迟选择应该就是类似“90% 请求的时延 &lt;= 80ms，或者 95% 请求的时延 &lt;=120ms ”这样的方式来设定SLO。</p><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p>Error就是我们最常见的错误，最能想到的就是状态码，比如在whosbug中将责任人信息传给服务器，报错了，亦或者是在get责任人的时候报错了，不光是4xx还是5xx都可以列进来，也可以去自定义一些状态码，比如创建一个用户的时候老报错什么的，也可以作为衡量的标准。我们可以用 正常的返回状态/总的返回状态 得到一个Error的SLO。</p><h3 id="Tickets"><a href="#Tickets" class="headerlink" title="Tickets"></a>Tickets</h3><p>Tickets是故障单，如果说一项任务需要去人工介入的话，类似于数据无法恢复，超时了，这些都需要人工介入，中断任务或者重新跑等等。对于Tickets的SLO就像是一个人工介入的门票一样，比如说我给SLO设置为10，那就说明我这个月每人工介入那就消耗一张Ticket，如果这十张消耗完了，那还要人工介入，那么这个月系统就不达标了。所以Ticket的SLO通常是一个整数值。</p><p>可以通过使用Prometheus和Grafana实现对各个指标的监控，我们得到这五种指标的SLO之后不一定需要得到一个唯一的SLO的值，可以看到有的是整数值，有的是百分数值，有的还是个在区间中定义的，只需要将每个指标都列出来即可。</p><h3 id="MTBF与MTTR"><a href="#MTBF与MTTR" class="headerlink" title="MTBF与MTTR"></a>MTBF与MTTR</h3><p>下面补充下Availability中用到两个量的定义。</p><p>MTBF（Mean Time Between Failure）</p><p>这个指标指的是平均的故障时间间隔，比方说对于whosbug的webservice而言，使用者每天运行使用十小时，但是在某天的使用期间出现了两次故障，第一次故障服务器挂掉了一个小时，第二次挂了俩小时，那么总共挂了仨小时，出现故障的总次数为2，MTBF的计算为（10-7）/2 。类似的这个量也可以用错误率来表示，错误率就是MTBF的倒数。</p><p>MTTR（Mean Time To Repair）</p><p>这个指标指的是平均修复所用的时间，根据MTBF中的例子，修复时间总共为3小时，故障次数为2，那么MTTR即为3/2h。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SRE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TraceSim算法概述</title>
      <link href="/2021/11/05/tracesim-read/"/>
      <url>/2021/11/05/tracesim-read/</url>
      
        <content type="html"><![CDATA[<p>本篇博客是针对TraceSim: A Method for Calculating Stack Trace Similarity的阅读。</p><p>在本文中提出了一个新的计算堆栈跟踪相似性的算法，该算法结合了TF-IDF和Levenshtein distance两者，且用了机器学习来构建堆栈跟踪间的相似性度量。</p><p>文章中需要注意的关键字：</p><ul><li>Duplicate Crash/Bug Report： 重复的崩溃/错误报告</li><li>Stack Trace：堆栈跟踪</li><li>WER：微软用于管理崩溃报告的系统。</li><li>Information Retrieval Approach： 信息检索方法</li><li>String Matching algorithms：字符串匹配算法</li></ul><p>TF-IDF:TF(term frequency)，IDF(inverse document frequency)。</p><p>Levenshtein distance:一个字符串匹配方法，在这里被改进用来计算堆栈间距离的度量。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>文章和ReBucket想要解决的是类似的问题，也就是对于像WER这样的管理崩溃报告的系统来说：</p><ul><li>对于给定的报告，在数据库中找到相似的报告并且根据他们属于同一错误的可能性进行排名</li><li>将一组给定的报告分发到buckets中（分桶）</li></ul><p>对于以上两个问题，定义一个好的相似性度量是很重要的，因为输出的质量很大程度上取决于此。而且仔细的改进相似性算法也是很重要，因为大量的报告需要被正确处理，甚至一个相对较小的改进就可以在分桶质量上有很大的提升作用。大多数的重复数据删除研究可以分为两类：基于IT-IDF或是堆栈追踪结构。前者是用到了信息检索方法，后者采用的是字符串匹配方法。本文结合了这两个方法并加了机器学习，设计了TraceSim算法。</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p>算法将两个堆栈跟踪（stack traces）作为输入，首先，算法会单独处理stack overflow exceptions(SOEs),因为这些堆栈跟踪包含了大量重复的帧，且他们的相似性可以用TF-IDF有效的计算相似性。</p><p>如果输入的堆栈报错不是SOEs将按顺序执行如下三个步骤：</p><ul><li>计算堆栈跟踪中每一帧的权重</li><li>计算两个堆栈跟踪中的edit distance，在本方法中，它被定义为带有帧权重的Levenshtein distance</li><li>将计算所得的Levenshtein distance归一化，作为最终结果</li></ul><p>这是算法实现的链接:</p><p><a href="https://github.com/traceSimSubmission/trace-sim">implementation</a></p><h3 id="单独处理SOEs"><a href="#单独处理SOEs" class="headerlink" title="单独处理SOEs"></a>单独处理SOEs</h3><p>作为堆栈溢出异常的堆栈跟踪有很多引用递归调用的重复帧。如果这个递归部分的两个堆栈跟踪相似，那么很可能他们错误情况也是相似的，递归部分相比非递归要多很多，所以复杂的测试对这类堆栈追踪是没必要的，根据帧频率计算他们的近似度就足够了。<br>文章使用了如下的IT-IDF算法来处理这种情况:<br><a href="https://ieeexplore.ieee.org/document/6498456">The Algorithm</a></p><h3 id="帧（Frame）权值计算"><a href="#帧（Frame）权值计算" class="headerlink" title="帧（Frame）权值计算"></a>帧（Frame）权值计算</h3><p>和ReBucket中类似，在比较两个堆栈追踪时，距离堆栈顶部的帧要更为重要，因为他们一般更可能包含bug的来源。算法将这种影响表示为帧权重：权重越高越重要。</p><p>我们确定了两个对权重有影响的因素：</p><ul><li>堆栈跟踪中帧的位置</li><li>帧在数据库中所有帧中出现的频率</li></ul><p>$f_{i}$被定义为堆栈中的第i个帧，那么对于堆栈中的所有帧$S T=f_{0}, \ldots, f_{N-1}$，权值的计算方式如下：</p><p>$\mathit{w}\left(f_{i}\right)=\mathit{lw}_{\alpha}\left(f_{i}\right) * \mathit{gw}_{\beta \gamma}\left(f_{i}\right)$</p><p>$l \mathbf{w}_{\alpha}\left(f_{i}\right)$是$f_{i}$的局部权重，对应第一个因素，而$\operatorname{gw}_{\beta \gamma}\left(f_{i}\right)$是$f_{i}$的全局权值，对应了第二个因素。𝛼, 𝛽 and 𝛾是数值超参数，用来提调整模型以适应数据——将算法调整的适应特定的堆栈追踪集合。</p><p>对于$f_{i}$，本地的权值的计算公式:</p><p>$\mathit{lw}_{\alpha}\left(f_{i}\right)=\frac{1}{i^{\alpha}}$</p><p>实践证明离堆栈顶部的帧局部权重更高，因为错误更可能是因为最后的函数调用导致的。</p><p>$f_{i}$的全局权重计算根据大伙都了解的信息检索算法来计算：$\mathit{TF}\left(f_{i}\right) * \mathit{IDF}\left(f_{i}\right)$，TF（f）（term frequency）表示帧在特定堆栈中的重要程度，ID（f）(inverse document frequency)表示对于整个堆栈跟踪的库来说，帧(f)有多不常见。在本文中不适用TF部分且认为它等于1，因为不用考虑帧排序，这实际上是关于堆栈中一个帧最重要的信息。这已经在计算$l \mathbf{w}_{\alpha}\left(f_{i}\right)$的时候考虑在内了，因此我们只用用如下的方式计算IDF即可:</p><p>$\mathit{IDF}\left(f_{i}\right)=\log \frac{\text { Total num. of stack traces }}{\text { Num. of stack traces } S T: f_{i} \in S T}$</p><p>全局权重的计算如下：</p><p>$\mathit{gw}_{\beta \gamma}\left(f_{i}\right)=\sigma\left(\beta\left(\operatorname{IDF}\left(f_{i}\right)-\gamma\right)\right)\\\sigma(x)=\frac{1}{1+e^{-x}}$</p><p>其中𝛽和𝛾是为了更平滑的调整IDF，我们给堆栈追踪中很常见的帧赋予较小的权重。这些帧可能是使用的开发框架，日志记录或者是线程池，总之是被经常调用的代码块。</p><h3 id="Levenshtein-Distance的计算"><a href="#Levenshtein-Distance的计算" class="headerlink" title="Levenshtein Distance的计算"></a>Levenshtein Distance的计算</h3><p>为了用数字表示堆栈跟踪间的差异，文章使用了修改版本的Levenshtein Distance，在经典的Levenshtein Distance包含插入，删除和替换操作的基础上不再考虑转置操作，因为堆栈跟踪中帧的顺序是很重要的，在一个堆栈中调换两个帧的位置是没道理的。</p><p>对于两个字符串，经典Levenshtein distance被定义为最少的编辑开销成本，即将一个单词更改为另一个单词所需的最少单字符编辑（插入、删除或替换）次数。</p><p>对于两个堆栈跟踪也是用一样的方法，但是这里用到的是之前得到的帧权值。</p><p>在计算一个帧的插入，删除或是替换的代价时，我们定义了如下操作成本：插入和删除的代价是帧对应的权重，替换的权重是原帧和新帧的权重之和。</p><h3 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h3><p>本文不使用Levenshtein distance的值进行聚类和分类，为了更好理解计算了归一化的相似度值:</p><p>$\operatorname{\mathit{sim}}\left(S T^{\prime}, S T^{\prime \prime}\right)=1-\frac{\operatorname{\mathit{dist}}\left(S T^{\prime}, S T^{\prime \prime}\right)}{\sum_{i=0}^{N^{\prime}-1} \mathit{w}\left(f_{i}^{\prime}\right)+\sum_{i=0}^{N^{\prime \prime}-1} \mathit{w}\left(f_{i}^{\prime \prime}\right)}$</p><p>在此$\operatorname{\mathit{dist}}\left(S T^{\prime}, S T^{\prime \prime}\right)$就是$S T^{\prime}, S T^{\prime \prime}$的Levenshtein distance，这个步骤让我们更好的理解相似性的结果，就像是深度学习中的softmax函数一样将结果归一化到[0, 1]，通常这样是更好理解的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReBucket论文精读</title>
      <link href="/2021/11/03/rebucket-paper-reading/"/>
      <url>/2021/11/03/rebucket-paper-reading/</url>
      
        <content type="html"><![CDATA[<p>本篇文章是对缺陷分析算法相关论文ReBucket A method for clustering duplicate crash reports based on call stack similarity的精读。</p><p>论文原链接：<br><a href="https://ieeexplore.ieee.org/abstract/document/6227111">ReBucket</a></p><p>tips: 图片加载不出来可能是被墙的原因</p><h1 id="Rebucket概述"><a href="#Rebucket概述" class="headerlink" title="Rebucket概述"></a>Rebucket概述</h1><p>关键词：</p><ul><li>crash reports——崩溃报告</li><li>hierarchical clustering method——层次聚类方法 </li><li>duplicate crash report——重复的崩溃报告 </li><li>WER——Windows Error Reporting，微软的及时告警分布系统。</li></ul><p>在WER中，崩溃报告被扔到了一个个桶（bucket）里，每个桶里包含的崩溃报告在理想状态下被认为是一致的，桶中的崩溃信息对于开发人员解决问题的优先级有很大的重要性（桶中信息到一定程度生成错误报告）。Rebucket的提出主要就是为了为了提高分桶的准确性。</p><p>文章提出了一个测量两个调用堆栈之间相似度的模型，称为PDM(Position Dependent Model-位置相关模型)。此模型依据两个调用堆栈上的函数数量，这些函数到堆栈顶部的距离，以及函数间的偏移距离来判断调用堆栈的相似度。在Rebucket中还有一个训练过程用来调整PDM所需的参数。</p><h1 id="算法的实现流程"><a href="#算法的实现流程" class="headerlink" title="算法的实现流程"></a>算法的实现流程</h1><h2 id="算法的整体结构"><a href="#算法的整体结构" class="headerlink" title="算法的整体结构"></a>算法的整体结构</h2><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/somethingBeUsed/4ee30aee617c318027e01fc9ca53513.png?raw=true" alt=""></p><p>我们首先来看一下算法的流程图，可以看到对于新到达的崩溃报告，Rebucket首先对他们进行了预处理来简化调用堆栈，之后用PDM模型计算调用堆栈的相似性，最终用层次聚类方法将崩溃报告聚类到相应的桶中。</p><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><p>删除以下两个函数：</p><ul><li>Immue Functions：简单到我们认为不会发生问题的函数</li><li>递归函数：递归函数是很常见的，在通常情况下不包含有效信息，也会影响PDM对堆栈相似性的测量,因此删除了递归函数。</li></ul><h2 id="计算堆栈间的相似性"><a href="#计算堆栈间的相似性" class="headerlink" title="计算堆栈间的相似性"></a>计算堆栈间的相似性</h2><h3 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h3><p>在介绍计算过程之前需要注意的两个量：</p><ul><li>当前帧到调用堆栈顶部帧间的距离</li><li>对齐偏移(Alignment Offset)：两个堆栈中匹配的函数到顶部帧间的偏移量,也就是两者的差值</li></ul><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/somethingBeUsed/55c5362289f31d90e2dbdfe72174855.png?raw=true" alt=""></p><p>我们通过上面这张图理解下两个概念，对于两个堆栈$C_1$和$C_2$，崩溃点都在顶部帧。$C_1$中的$f_0$，$f_1$，$f_4$与$C_2$中的$f_0$，$f_2$，$f_6$匹配,对于$C_1$中的$f_4$函数,它到栈顶的距离是4。在$C_2$中的$f_6$函数到栈顶的距离是6。而对齐偏移就是两者的差，也就是2。</p><h3 id="PDM"><a href="#PDM" class="headerlink" title="PDM"></a>PDM</h3><p>在理解了这两个概念之后，我们来看一下一早就提到的位置相关模型(PDM)。</p><p>PDM的设计基于以下两个原理：</p><ul><li>离栈顶越近的地方权重越大，因为bug更容易发生在栈顶附近</li><li>两匹配的堆栈间对齐偏移应该是更小的</li></ul><p>而两个堆栈$C_1$和$C_2$间的相似度计算的流程如下：</p><p>定义L作为$C_1$和$C_2$间所有公共帧序列的集合,$L_i$是其中一个公共帧序列，$S_{i, 1}, S_{i, 2},\ldots S_{i, k}$是$C_1$和$C_2$中都具有的匹配函数。</p><p>$L=\left\{L_{1}, L_{s}, L_{3} \ldots\right\} \quad L_{i}=\left\{S_{i, 1}, S_{i, 2}, S_{i, 3}, \ldots S_{i, k} \ldots\right\}$</p><p>定义$POS(C_q, S_{i,k})$作为$S_{i,k}$在$C_q$堆栈中的位置，l作为$C_1$和$C_2$间帧数的最小值，那么$C_1$和$C_2$间的相似度可以由公式（1）来定义：</p><p>$\left\{ \begin{array}{lr}\operatorname{sim}\left(C_{1}, C_{2}\right)=\frac{\max_{L_{i}\in L} \left[ Q\left(L_{i}\right) \right] }{\sum_{j=0}^{l} e^{-cj}}\\\\Q\left(L_{i}\right)=\sum_{s_{i, k} \in L_{i}} e^{-c \min \left( \operatorname{Pos}\left(C_{1}, s_{i, k}\right), \operatorname{Pos}\left(C_{2}, s_{i, k}\right) \right)}e^{-o \mid \operatorname{Pos}\left(C_{1}, s_{i, k}\right)-\operatorname{Pos}\left(C_{2}, s_{i, k}\right) \mid}\end{array}\right.\quad (1)$</p><p>其中c是到顶部帧的距离系数，o是对齐偏移的系数。c和o的值可以根据过去的经验来手动设置。本文之后还提出了一种学习方法去自动获取最佳的系数值。$Q\left(L_{i}\right)$用来衡量$L_i$匹配函数的相似度的值。第一个指数函数考虑了一对匹配函数到顶部帧的最小距离。第二个指数函数考虑了一对匹配函数的最小对齐偏移。到顶部的距离和对齐偏移越小那么函数的返回值$Q\left( L_i \right)$也就越大。</p><p>根据公式（1），调用栈相似度的度量由能让$Q\left( L_i \right)$达到最大值的公共帧序列来决定。它是通过穷举来找到这个公共帧序列的，这样效率是较为低下的。根据最长公共子序列问题，文章提出了一个动态规划算法去解决这个问题：</p><ul><li>定义一个相似矩阵$M\left[i,j\right]$，表示量子序列的相似性。第一个子序列是从$C_1$的顶部帧到i个帧，第二个是从顶部帧到$C_2$的第j个帧。</li><li>根据$M\left[i,j\right]$的定义，堆栈的相似性计算可以转化为M[m,n]的计算,其中$m$为$C_1$的长度，$n$为$C_2$的长度，具体见公式(4)</li><li>M[i,j]可以被分解为几个子问题，见公式（2）和公式（3）。相似度矩阵M[i,j]可以通过逐步计算矩阵元素来获得。</li></ul><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/somethingBeUsed/16359361923.png?raw=true" alt=""></p><p>通过PDM，两个调用堆栈间的相似性就被定义了，这样就可以确定两个崩溃报告是否合适归在一个聚类中了。</p><h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><p>通过PDM计算堆栈相似度之后，若两堆栈相似性很高，那么相关的崩溃报告就会被归到一个桶里。</p><p>本文使用了一种凝聚力分层聚类方法——Agglomerative Hierarchical clustering technique,是一种自下而上的聚类方法。在聚类开始时，每个调用堆栈都归到属于他自己的集群。之后最近的集群会进行合并。本文采用两个集群所有元素配对的最大距离作为集群间距离的度量。换句话说，集群间距离的度量依据两个集群间堆栈的最大距离。集群间的距离被定义为公式（5）和公式（6），其中$Cl_i$和$Cl_j$时一对集群，而$C_1$和$C_2$分别为$Cl_i$和$Cl_j$中的堆栈。</p><p>$\begin{array}{lr}\operatorname{distance}\left({Cl}_{i}, {Cl}_{j}\right)=\max_{C_{1} \in {Cl}_{i}, C_{2} \in {Cl}_{j}}\operatorname{ dist }\left(C_{1}, C_{2}\right)&amp; (5)\\\operatorname{ dist }\left(C_{1}, C_{2}\right)=1-\operatorname{sim}\left(C_{1}, C_{2}\right)&amp; (6)\end{array}$</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/somethingBeUsed/0c416ff1f53224dae4b8f889e1d7d5b.png?raw=true" alt=""></p><p>在一次聚类的过程中，如果所有的堆栈被合并为了一个集群，那么这个凝聚力分层聚类方法的时间复杂度就是$O(n^3)$，在这个例子里，我们采用一个距离阈值d作为聚类过程的停止标准。d的值可以手动设置，或者通过一个学习模型来训练。一旦一对集群间的最大距离超过了这个阈值d，这次的聚类过程就会被停止。最终，集群的结果就是装着相似崩溃报告的buckets。如上图所示，最终生成了两个集群，他们分别是装着A,B报告的bucket和装着C,D,E报告的bucket。</p><h2 id="训练算法相关参数"><a href="#训练算法相关参数" class="headerlink" title="训练算法相关参数"></a>训练算法相关参数</h2><p>PDM使用两个系数：</p><ul><li>c是到顶部框架的距离</li><li>o是对齐偏移</li></ul><p>分层聚类中的距离阈值也是一个应该调整的参数。</p><p>如果这些参数设置不好，肯定会有明显不同的相似性结果。参数也可能会因为项目的不同而异。</p><p>下面是这些参数值的训练过程（D为一些调用堆栈对）：</p><p>1.给c一个较小的初始值$c_0$<br>2.给o一个较小的初始值$o_0$<br>3.对于D中的每个调用堆栈 (for循环)<br>4.用公式(1)，c以及o计算p的相似度<br>5.结束for循环<br>6.给距离阈值一个较小的初始值$d_0$<br>7.对于D中的每个调用堆栈 (for循环)<br>8.if p的相似度大于1-d，那么p被标记为相似；else p被标记为不相似<br>9.结束for循环<br>10.计算D中所有调用堆栈对的F-measure<br>11.将d增加一小步$s_1$<br>12.重复步骤7-11，直至d达到最大阈值$d_max$<br>13.将o增加一小步$s_2$<br>14.重复步骤3-13，直至o到达最大阈值$o_max$<br>15.将c增加一小步$s_3$<br>16.重复步骤2-15，直至c达到最大阈值$c_max$<br>17.选择达到最佳F-measure的$c_optimal$，$o_optimal$和$d_optimal$<br>18.返回三个值$c_optimal$，$o_optimal$和$d_optimal$</p><p>在训练算法中，初始化$c_0$ = 0，$o_max$ = 2，$s_2$ = 0.1，$c_0$ = 0，$c_max$ = 2，$s_3$ = 0.1，这就代表训练过程中每次都给c和o增加0.1进行迭代。对于距离阈值d，$d_0$ = 0，$d_max$ = 1，$s_1$ = 0.01，从0到1，步长为0.01。最终选择最好的F-measure。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的interface</title>
      <link href="/2021/10/31/go-interface/"/>
      <url>/2021/10/31/go-interface/</url>
      
        <content type="html"><![CDATA[<p>在 Go 中，关键字 interface 被赋予了多种不同的含义。每个类型都有接口，意味着对那个类型定义了方法集合 。如下这段代码定义了具有一个字段和两个方法的结构类型 S。</p><pre class="line-numbers language-none"><code class="language-none">type S struct { i int }func (p *S) Get() int { return p.i }func (p *S) Put(v int) { p.i = v }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以定义接口类型，仅仅是方法的集合。这里定义了一个有两个方法的接口 I：<br></p><pre class="line-numbers language-none"><code class="language-none">type I interface {Get() intPut(int) }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>对于接口 I，S 是合法的实现，因为它定义了 I 所需的两个方法。注意，即便是没有明确定义 S 实现了 I，这也是正确的。<br>Go 程序可以利用这个特点来实现接口的另一个含义，就是 接口值:</p><pre class="line-numbers language-none"><code class="language-none">func f(p I) {  //定义一个函数接受一个接口类型作为参数fmt.Println(p.Get()) //p实现了接口I，必须有get()方法p.Put(1)  //Put()方法类似}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的变量 p 保存了接口类型的值。因为 S 实现了 I，可以调用 f 向其传递 S 类型的值的指针：<br></p><pre class="line-numbers language-none"><code class="language-none">var s S ; f(&amp;s)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>获取 s 的地址，而不是 S 的值的原因，是因为在 s 的指针上定义了方法。<p></p><p>在 Go 中的接口有着与许多其他编程语言类似的思路：C++ 中的纯抽象虚基类，Haskell中的 typeclasses 或者 Python 中的 duck typing。然而没有其他任何一个语言联合了接口值、静态类型检查、运行时动态转换，以及无须明确定义类型适配一个接口。这些给 Go 带来的结果是，强大、灵活、高效和容易编写的。</p><p>定义另外一个类型同样实现了接口 I：<br></p><pre class="line-numbers language-none"><code class="language-none">type R struct { i int }func (p *R) Get() int { return p.i }func (p *R) Put(v int) { p.i = v }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><p>函数 f 现在可以接受类型为 R 或 S 的变量。假设需要在函数 f 中知道实际的类型。在Go 中可以使用 type switch 得到。</p><p>type switch:</p><pre class="line-numbers language-none"><code class="language-none">func f(p I) {switch t := p.(type) { case *S: case *R: case S: case R: default:     } }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 switch 之外使用 (type) 是非法的。类型判断不是唯一的运行时得到类型的方法。<br>为了在运行时得到类型，同样可以使用 “comma, ok” 来判断一个接口类型是否实现了某个特定接口：<br></p><pre class="line-numbers language-none"><code class="language-none">if t, ok := something.(I) ; ok {// 对于某些实现了接口 I 的// t 是其所拥有的类型}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>确定一个变量实现了某个接口，可以使用：<br></p><pre class="line-numbers language-none"><code class="language-none">t := something.(I)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中类型转换</title>
      <link href="/2021/10/24/go-typechange/"/>
      <url>/2021/10/24/go-typechange/</url>
      
        <content type="html"><![CDATA[<p>有时需要将一个类型转换为另一个类型。在 Go 中可以做到，当然有一些特定规则。首先，将一个值转换为另一个是由操作符（看起来像是函数：byte()）完成的，而并且不是所有的转换都是允许的。</p><p>从 string 到字节或者 ruin 的 slice。<br></p><pre class="line-numbers language-none"><code class="language-none">mystring := "hello this is stringbyteslice := []byte(mystring)runeslice := []rune(mystring)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>转换到 byte slice，每个 byte 保存字符串对应字节的整数值。注意 Go 的字符串是 UTF-8 编码的，一些字符可能是 1、2、3 或者 4 个字节结尾。<p></p><p>转换到 rune slice，每个 rune 保存 Unicode 编码的指针。字符串中的每个字符对应一个整数。</p><p>从字节或者整形的 slice 到 string。</p><pre class="line-numbers language-none"><code class="language-none">b := []byte {'h','e','l','l','o'} // 复合声明s := string(b)i := []rune {257,1024,65}r := string(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于数值，定义了下面的转换：<br>1、将整数转换到指定的（bit）长度：uint8(int)；<br>2、从浮点数到整数：int(float32)。这会截断浮点数的小数部分；<br>3、其他的类似：float32(int)。<br>用户定义类型的转换<br>如何在自定义类型之间进行转换？这里创建了两个类型 Foo 和 Bar，而 Bar 是 Foo 的一个别名：</p><pre class="line-numbers language-none"><code class="language-none">type foo struct { int } // 匿名字段type bar foo // bar 是 foo 的别名var b bar = bar{1} // 声明 b 为 bar 类型var f foo = b // 赋值 b 到 f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后一行会引起错误：<br>cannot use b (type bar) as type foo in assignment(不能使用 b（类型 bar）作为类型 foo 赋值)</p><p>这可以通过转换来修复：<br></p><pre class="line-numbers language-none"><code class="language-none">var f foo = foo(b)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><p>注意转换那些字段不一致的结构是很困难的。同时，转换 b 到 int 同样会出错；整数与有整数字段的结构体并不是一样的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中自定义类型</title>
      <link href="/2021/10/16/go-type/"/>
      <url>/2021/10/16/go-type/</url>
      
        <content type="html"><![CDATA[<p>Go 允许定义新的类型，可以通过关键字 type 实现：<br>type foo int<br>如上我们创建了一个新的类型 foo 作用跟 int 一样。创建更加复杂的类型需要用到 struct 关键字。这有个在一个数据结构中记录某人的姓名（string）和年龄（int），并且使其成为一个新的类型的例子：</p><pre class="line-numbers language-none"><code class="language-none">package mainimport "fmt"type NameAge struct {    name string // 不导出    age int // 不导出}func main() {    a := new(NameAge)    a.name = "Pete" ; a.age = 42    fmt.Printf("%v\n", a)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常，fmt.Printf(“%v\n”, a) 的输出是&amp;{Pete 42}<br>Go 知道如何打印结构。如果仅想打印某一个，或者某几个结构中的字段，需<br>要使用 .<field name="">。例如，仅仅打印名字：<br></field></p><pre class="line-numbers language-none"><code class="language-none">fmt.Printf("%s", a.name) // %s 格式化字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h3 id="结构字段"><a href="#结构字段" class="headerlink" title="结构字段"></a>结构字段</h3><p>之前已经提到结构中的项目被称为field。没有字段的结构：struct {}<br>或者有四个c 字段的：<br></p><pre class="line-numbers language-none"><code class="language-none">struct {    x, y int    A *[]int    F func()}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>如果省略字段的名字，可以创建匿名字段，例如：<br><pre class="line-numbers language-none"><code class="language-none">struct {    T1 // 字段名字是 T1    *T2 // 字段名字是 T2    P.T3 // 字段名字是 T3    x, y int // 字段名字是 x 和 y }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>注意首字母大写的字段可以被导出，也就是说，在其他包中可以进行读写。字段名以小写字母开头是当前包的私有的。<p></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>可以对新定义的类型创建函数以便操作，可以通过两种途径：</p><ol><li>创建一个函数接受这个类型的参数。<pre class="line-numbers language-none"><code class="language-none">func doSomething(n1 *NameAge, n2 int) { /* */ }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>（你可能已经猜到了）这是 函数调用。</li><li>创建一个工作在这个类型上的函数（参阅在 2.1 中定义的接收方）：<pre class="line-numbers language-none"><code class="language-none">func (n1 *NameAge) doSomething(n2 int) { /* */ }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>这是方法调用，可以类似这样使用：<pre class="line-numbers language-none"><code class="language-none">var n *NameAgen.doSomething(2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>使用函数还是方法是由程序员决定的，但是如果想要满足接口就只能使用方法。如果没有这方面的需求，那就由个人品味决定了。</li></ol><p>下面的类型定义中有一些微小但是很重要的不同之处。<br>我们假设有如下代码：<br></p><pre class="line-numbers language-none"><code class="language-none">// Mutex 数据类型有两个方法，Lock 和 Unlock。type Mutex struct { /* Mutex 字段 */ }func (m *Mutex) Lock() { /* Lock 实现 */ }func (m *Mutex) Unlock() { /* Unlock 实现 */ }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>现在用两种不同的风格创建了两个数据类型:<br><pre class="line-numbers language-none"><code class="language-none">type NewMutex Mutextype PrintableMutex struct {Mutex }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>现在 NewMutux 等同于 Mutex，但是它没有任何 Mutex 的方法。换句话说，它的方法<br>是空的。但是 PrintableMutex 已经从 Mutex 继承了方法集合。*PrintableMutex 的方法集合包含了 Lock 和 Unlock 方法，被绑定到其匿名字段 Mutex。<p></p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的指针及内存分配</title>
      <link href="/2021/10/10/go-point/"/>
      <url>/2021/10/10/go-point/</url>
      
        <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>Go 有指针。然而却没有指针运算，因此它们更像是引用而不是我们所知道的来自于 C的指针。指针非常有用。在 Go 中调用函数的时候，得记得变量是值传递的。因此，为了修改一个传递入函数的值的效率和可能性，有了指针。</p><p>通过类型作为前缀来定义一个指针’<em>’：var p </em>int。现在 p 是一个指向整数值的指针。所有新定义的变量都被赋值为其类型的零值，而指针也一样。一个新定义的或者没有任何指向的指针，有值 nil。在其他语言中，被叫做空（NULL）指针，在 Go 中就是 nil。让指针指向某些内容，可以使用取址操作符 （&amp;），像这样：</p><pre class="line-numbers language-none"><code class="language-none">var p *intfmt.Printf("%v", p) // 打印 nilvar i int // 定义一个整形变量 ip = &amp;i // 使得 p 指向 ifmt.Printf("%v", p) // 打印出来的内容类似 0x5ff72b76c000b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从指针获取值是通过在指针变量前置’*’ 实现的：<br></p><pre class="line-numbers language-none"><code class="language-none">p = &amp;i // 获取 i 的地址*p = 8 // 修改 i 的值fmt.Printf("%v\n", *p) // 打印 8fmt.Printf("%v\n", i) // 同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>因为没有指针运算，所以如果这样在golang写：<em>p++，它表示 (</em>p)++：首先获取指针指向的值，然后对这个值加一，而不是对指针本身进行操作。</p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>Go 同样也有垃圾回收，也就是说无须担心内存分配和回收。</p><p>Go 有两个内存分配原语，new 和 make。它们应用于不同的类型，做不同的工作，可能<br>有些迷惑人，但是规则很简单。</p><h3 id="用new分配内存"><a href="#用new分配内存" class="headerlink" title="用new分配内存"></a>用new分配内存</h3><p>内建函数 new 本质上说跟其他语言中的同名函数功能一样：new(T) 分配了零值填充的 T 类型的内存空间，并且返回其地址，一个 *T 类型的值。用 Go 的术语说，它返回了一个指针，指向新分配的类型 T 的零值。</p><p>这意味着使用者可以用 new 创建一个数据结构的实例并且可以直接工作。 如bytes.Buffer 的文档所述 “Buffer 的零值是一个准备好了的空缓冲。” 类似的，sync.Mutex 也没有明确的构造函数或 Init 方法。取而代之，sync.Mutex 的零值被定义为非锁定的互斥量。</p><p>零值是非常有用的。例如这样的类型定义：</p><pre class="line-numbers language-none"><code class="language-none">type SyncedBuffer struct {lock sync.Mutexbuffer bytes.Buffer}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>SyncedBuffer 的值在分配内存或定义之后立刻就可以使用。在这个片段中，p 和 v 都<br>可以在没有任何更进一步处理的情况下工作。</p><pre class="line-numbers language-none"><code class="language-none">p := new(SyncedBuffer) // Type *SyncedBuffer，已经可以使用var v SyncedBuffer // Type SyncedBuffer，同上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="用-make-分配内存"><a href="#用-make-分配内存" class="headerlink" title="用 make 分配内存"></a>用 make 分配内存</h3><p>回到内存分配。内建函数 make(T, args) 与 new(T) 有着不同的功能。它只能创建slice，map和 channel，并且返回一个有初始值（非零）的 T 类型，而不是 *T。本质来讲，导致这三个类型有所不同的原因是指向数据结构的引用在使用前必须被初始化。例如，一个 slice，是一个包含指向数据（内部 array）的指针，长度和容量的三项描述符；在这些项目被初始化之前，slice 为 nil。对于 slice，map 和 channel，make 初始化了内部的数据结构，填充适当的值。<br>例如，make([]int, 10, 100) 分配了 100 个整数的数组，然后用长度 10 和容量 100创建了 slice 结构指向数组的前 10 个元素。区别是，new([]int) 返回指向新分配的内存的指针，而零值填充的 slice 结构是指向 nil 的 slice 值。</p><p>用一个例子展示new和make的不同：</p><pre class="line-numbers language-none"><code class="language-none">var p *[]int = new([]int) // 分配 slice 结构内存；很少使用var v []int = make([]int , 100) // v 指向一个新分配的有 100 个整数的数组 // 不必要的复杂例子var p *[]int = new([]int)*p = make([]int , 100, 100)// 更常见v := make([]int , 100) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>make 仅适用于 map，slice 和 channel，并且返回的不是指针。应用 new 获得特定的指针。</p><p>new 分配；make 初始化<br>上面的两段可以简单总结为：<br>• new(T) 返回 *T 指向一个零值 T<br>• make(T) 返回初始化后的 T<br>当然 make 仅适用于 slice，map 和 channel。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中的延迟代码</title>
      <link href="/2021/09/30/go-defer/"/>
      <url>/2021/09/30/go-defer/</url>
      
        <content type="html"><![CDATA[<p>GO语言中，defer代码块会在函数调用链表中增加一个函数调用，这个函数调用是发生在return 之后的，通常用来释放函数的内部变量。</p><p>假设有一个函数，打开文件并对文件进行若干读写，在这种函数中，经常会有提前返回的情况。如果这样的话，就需要关闭正在工作的文件描述符。可能你会写如下的代码：</p><pre class="line-numbers language-none"><code class="language-none">// 不用deferfunc ReadWrite() bool {    file.Open("file")    // 做一些工作    if failureX {        file.Close()         return false    }    if failureY {        file.Close()         return false    }    file.Close()     return true    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个函数中出现了很多的重复代码，而defer语句是可以解决这些问题的，在defer后指定的函数会在函数退出前进行调用。</p><p>我们可以通过defer语句，将Close对应的内容放置在Open后面，可以使函数更加可读和健壮。</p><pre class="line-numbers language-none"><code class="language-none">func ReadWrite() bool {    file.Open("file")    defer file.Close()  // file.Close() 被添加到了 defer 列表    // 做一些工作    if failureX {        return false  // Close() 现在自动调用    }    if failureY {        return false  // 这里也是    }    return true  // And here}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们再来看一个延迟函数的例子：</p><pre class="line-numbers language-none"><code class="language-none">for i := 0 ; i &lt; 5 ; i++ {    defer fmt.Printf("%d ", i)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>延迟的函数是按照后进先出（LIFO）的顺序执行的，所以上面for循环的例子会打印：4 3 2 1 0.利用defer也可以修改返回值，假设正在使用命名结果参数和函数符号，例如下面这个函数：</p><pre class="line-numbers language-none"><code class="language-none">defer func() {        /* ... */}()     // ← () 在这里是必须的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者这个例子，我们更容易理解为什么，以及在哪需要用括号。<br></p><pre class="line-numbers language-none"><code class="language-none">defer func(x int) {        /* ... */}(5)    // 为输入参数 x 赋值 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>在这个defer匿名函数中，可以访问任何命名返回参数：<p></p><pre class="line-numbers language-none"><code class="language-none">func f() (ret int) { ← ret 初始化为零    defer func() {        ret++  // ret 增加为 1    }()    return 0  // 返回的是 1 而不是 0！ }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环展开</title>
      <link href="/2021/09/25/loop-unwinding/"/>
      <url>/2021/09/25/loop-unwinding/</url>
      
        <content type="html"><![CDATA[<p>循环展开是一种程序变换，通过增加每次迭代计算的元素数量，减少循环的迭代次数，在之前的程序优化中有函数用到循环展开。循环展开能从两个方面改进程序的性能。首先，它减少了不直接有助于程序结果的操作的数量，例如循环索引计算和条件分支。第二，它提供了一些方法，可以进一步变化代码，减少整个计算中关键路径上的操作数量。</p><p>这是之前计算前置和的两个函数：<br></p><pre class="line-numbers language-none"><code class="language-none">// 计算前置和不使用和使用循环展开void psum1(float a[], float p[], long n){      long i;      p[0] = a[0];      for (i = 1; i&lt;n; i++)           p[i] = p[i-1] + a[i];}//程序每次迭代计算前置和的两个元素，因而将需要的迭代次数减半void psum2(float a[], float p[], long n){      long i;      p[0] = a[0];      for (i = 1; i&lt;n-1; i+=2) {           float mid_val = p[i-1] + a[i];           p[i] = mid_val;           p[i+1] = mid_val + a[i+1];      }      if (i &lt; n)          p[i] = p[i-1] + a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>接下来的函数是合并代码的使用“2*1循环展开”的版本。之前几个版本的代码都在程序优化的第二部分。</p><pre class="line-numbers language-none"><code class="language-none">// 此程序中的IDENT和OP可以用#define来定义void combined5(vec_ptr v, data_t *dest){    long i;    long length = vec_length(v);    long limit = length-1;    data_t *data = get_vec_start(v);    data_t acc = IDENT;     /* Combine 2 elements at a time */    for (i = 0; i &lt; limit; i+=2) {        acc = (acc OP data[i]) OP data[i+1];    }    /* Finish any remaining elements*/    for(; i &lt; length; i++){        acc = acc OP data[i];    }    *dest = acc;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序中第一个循环每次处理数组的两个元素。也就是每次迭代，循环索引i加2，再一次迭代中，对数组元素i和i+1使用合并运算。</p><p>在一般情况下，向量长度不一定是2的倍数，想要让代码对任意向量长度都能够正确工作，可以从两个方面来处理这个需求。首先，确保第一次循环不会超出数组的界限。对于长度为n的向量，我们将循环界限设置为n-1。然后，保证只有当循环索引i满足i&lt;n-1时才会执行该循环，因此最大数组索引i+1满足i+1&lt;(n-1)+1=n。</p><p>将上述思想归纳为对一个循环按任意因子k进行展开，由此产生k×1循环展开。为此，上限为n-k+1，在循环内对元素i到i+k-1应用合并运算。每次迭代，循环索引i加k。那么最大循环索引i+k-1会小于n。要使用第二个循环，以每次处理一个元素的方式处理向量的后几个元素。这个循环体将会执行0~k-1次。对于k=2，可以用一个最简单的条件语句，可选的增加最后一次迭代，就像函数pum2所示，k&gt;2时，最后的这些情况最好用一个循环来表示，所以对k=2的情况，我们同样也采用这个编程惯例。称之为“k×1循环展开”，因为循环展开因子为k，而累积值旨在单个变量acc中。</p><table class="MsoTableGrid" border="1" cellspacing="0" style="border-collapse:collapse;border:none;mso-border-left-alt:0.5000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;mso-border-insideh:0.5000pt solid windowtext;mso-border-insidev:0.5000pt solid windowtext;mso-padding-alt:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;"><tbody><tr style="height:7.5500pt;"><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">函数</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">方法</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">整数</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">浮点数</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr style="height:7.5500pt;"><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ <span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ <span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">4</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">5</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">延迟界限</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">吞吐量界限</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="宋体">无展开</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">2*1</font><font face="宋体">展开</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3*1</font><font face="宋体">展开</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p>&nbsp;</o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.27</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;</span><font face="Calibri">3.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;</span></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">3.01</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.01 <span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>3.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.00 <span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>3.00</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">0.50 <span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>1.00</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;</span><font face="Calibri">5.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">3.01 <span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;</span></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">5.01</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">3.01 <span style="mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;</span></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">5.01</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3.00 <span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>5.00</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.00 <span style="font-family:Calibri;mso-spacerun:'yes';">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>0.50</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr></tbody></table><p>我们可以看到对于整数加法，CPE有所改进，得到的延迟界限为1.00，这就是因为循环展开减少了循环开销的操作。相对于计算向量所需要的假发数量，降低开销操作的数量，此时整数加法的一个周期的延迟就成为了限制性能的因素。另一方面，其他情况没有性能提高，它们已经达到了其他延迟界限。</p><p>编译器可以很容易的执行循环展开。只要优化级别设置的足够高，用优化等级三以上调用GCC就可以执行循环展开。</p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于程序的性能优化-part2</title>
      <link href="/2021/09/18/program-performance-optimization2/"/>
      <url>/2021/09/18/program-performance-optimization2/</url>
      
        <content type="html"><![CDATA[<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>为了说明一个抽象程序是如何被系统转换为更有效地代码的，之后的例子我们将使用如下的向量数据结构的运行示例，向量由两个内存块表示：头部和数据数组。<br>头部是一个声明如下的结构：<br></p><pre class="line-numbers language-none"><code class="language-none">/* Create abstract data type for vector */typedef struct {    long len;    data_t *data;} vec_rec, *vec_ptr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>这个声明用data_t来表示基本元素的数据类型。在测试中，我们度量代码对于整数和浮点数数据的性能。为此，会分别为不同的类型声明编译和运行程序，像下面这个例子对数据类型long一样：</p><pre class="line-numbers language-none"><code class="language-none">typedef long data_t;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们还会分配一个len个data_t类型对象的数组，来存放实际的向量元素。</p><p>如下给出的是一些生成向量，访问向量元素以及确定向量长度的基本过程。值得注意的是向量访问函数get_vec_element,它会对每个向量引用进行辩解检查。类似于很多其它语言所使用的数组表示法。边界检查降低了程序出错的机会，但会减缓程序的执行。</p><p>向量抽象数据类型的实现，在实际的程序中，数据类型data_t会被声明为明确的数据类型如int或float：<br></p><pre class="line-numbers language-none"><code class="language-none">/* Create vector of specified length */vec_ptr new_vec(long len){    /* Allocate header structure */    vec_ptr result = (vec_ptr) malloc(sizeof(vec_rec));    data_t *data = NULL;    if (!result)        return NULL;  /* Couldn't allocate storage */    result-&gt;len = len;/* $end vec */    /* We don't show this in the book */    result-&gt;allocated_len = len;/* $begin vec */    /* Allocate array */    if (len &gt; 0) {        data = (data_t *)calloc(len, sizeof(data_t));if (!data) {    free((void *) result);     return NULL; /* Couldn't allocate storage */}    }    /* data will either be NULL or allocated array */    result-&gt;data = data;    return result;}/* Free storage used by vector */void free_vec(vec_ptr v) {    if (v-&gt;data)free(v-&gt;data);    free(v);}/* * Retrieve vector element and store at dest. * Return 0 (out of bounds) or 1 (successful) */int get_vec_element(vec_ptr v, long index, data_t *dest){    if (index &lt; 0 || index &gt;= v-&gt;len)return 0;    *dest = v-&gt;data[index];    return 1;}/* Return length of vector */long vec_length(vec_ptr v){    return v-&gt;len;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>作为一个优化的示例，如下的代码会使用某种运算，将一个向量中所有的元素合并为一个值，通过使用编译时常数IDENT和OP的不同定义，这段代码可以重编译为对数据进行不同的运算。<br>这是一个合并运算的初始实现，通过定义IDENT和OP，可以用来测试该函数对不同运算的性能：</p><pre class="line-numbers language-none"><code class="language-none">/* Implementation with maximum use of data abstraction */void combine1(vec_ptr v, data_t *dest){    long i;    *dest = IDENT;    for(i = 0; i &lt; vec_length(v); i++) {        data_t val;        get_vec_element(v, i, &amp;val);        *dest = *dest OP val;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之后我们会对这段代码进行一系列的优化，为评估性能优化，会在一个参考机上测量函数的CPE性能。<br>以下是combine1的CPE度量值</p><table class="MsoTableGrid" border="1" cellspacing="0" style="border-collapse:collapse;border:none;mso-border-left-alt:0.5000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;mso-border-insideh:0.5000pt solid windowtext;mso-border-insidev:0.5000pt solid windowtext;mso-padding-alt:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;"><tbody><tr style="height:7.5500pt;"><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">函数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">方法</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">整数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">浮点数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr style="height:7.5500pt;"><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">combine1</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">combine1</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">抽象的未优化的</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">抽象的<font face="Calibri">-O1</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">22.68 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20.02</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">10.12 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.12 </font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">19.98 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20.18</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">10.17 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.14</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr></tbody></table><p>未经优化的代码是从C语言代码到机器代码的直接翻译，通常效率较低，简单的使用命令行选项“-O1”，就会进行一些基本的优化，这样就可以显著提升性能。</p><h3 id="消除循环的低效率"><a href="#消除循环的低效率" class="headerlink" title="消除循环的低效率"></a>消除循环的低效率</h3><p>可以观察到，过程combine1调用函数vec_length作为for循环的测试条件。在循环中，每次循环迭代时都必须对测试条件求值。另一方面，向量的长度并不会随着循环的进行而改变。因此，我们只需要计算一次向量的长度，然后在我们的测试条件中都会使用这个值。</p><p>以下是一个修改了的版本，称为combine2，它在开始时就调用了vec_length,并且将结果赋值给局部变量length。对于某些数据类型和操作，这个变换明显地影响了某些数据类型和操作的整体性能，对于其他的则很小甚至没有影响。无论哪种情况，都需要这种变化来消除这个低效率，这有可能称为尝试进一步优化时的瓶颈。</p><p>改进循环测试的效率，通过把vec_length的调用移出循环，不需要每次迭代都执行该函数。<br></p><pre class="line-numbers language-none"><code class="language-none">void combine2(vec_ptr v, data_t *dest){    long i;    long length = vec_length(v);    *dest = IDENT;    for (i = 0; i &lt; length; i++) {        data_t val;        get_vec_element(v, i, &amp;val);        *dest = *dest OP val;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><table class="MsoTableGrid" border="1" cellspacing="0" style="border-collapse:collapse;border:none;mso-border-left-alt:0.5000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;mso-border-insideh:0.5000pt solid windowtext;mso-border-insidev:0.5000pt solid windowtext;mso-padding-alt:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;"><tbody><tr style="height:7.5500pt;"><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">函数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">方法</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">整数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">浮点数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr style="height:7.5500pt;"><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">c</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">ombine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">c</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">ombine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">2</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">抽象的</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">-O1</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">移出<font face="Calibri">vec_length</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">10.12 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10.12 </span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">7.02</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;<font face="Calibri">9.03</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">10.17</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">11.14</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">9.02</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">11.</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">03</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr></tbody></table><p>这是一类常见的优化，称为代码移动（code motion）。这类优化需要识别执行多次但是计算结果不会改变的计算。因而可以将计算移动到代码前面不会被多次求值的部分。</p><p>优化编译器会试着进行代码移动。不过，对于会改变在哪里调用函数或调用多少次的变换，编译器会非常小心。他们不能够可靠的发现一个函数是否会有副作用，因而会假设函数有副作用。例如，vec_length函数由某周副作用，那combine1和combine2可能就会有不同的行为。为了改进代码，程序员一般要显式的完成代码移动。</p><h3 id="减少过程调用"><a href="#减少过程调用" class="headerlink" title="减少过程调用"></a>减少过程调用</h3><p>如我们所知，过程调用会带来开销，而且妨碍大多数形式的程序优化。从combine2的代码可以看出，每次循环都要调用get_vec_element来获取下一个向量元素。对于每个向量调用，这个函数要把向量索引i与循环边界做比较，很明显会造成低效率。在处理任意的数组访问时，边界检查是很有用的特性，但是对combine2代码的简单分析表明所有的引用都是合法的。</p><p>作为替代，假设为我们的抽象数据类型增加一个函数get_vec_start。这个函数返回数组的起始地址。之后我们可以写出图三的函数，其内循环里没有函数调用。它没有用函数调用来获取每个向量元素，而是直接访问数组。虽说这种变换损害了程序的模块性，但是在获取高性能结果的路上，这是必要步骤。</p><pre class="line-numbers language-none"><code class="language-none">data_t *get_vec_start(vec_ptr v){    return v-&gt;data;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">void combine3(vec_ptr v, data_t *dest){    long i;    long length = vec_length(v);    data_t *data = get_vec_start(v);    *dest = IDENT;    for (i = 0; i &lt; vec_length(v); i++) {        *dest = *dest OP data[i];    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table class="MsoTableGrid" border="1" cellspacing="0" style="border-collapse:collapse;border:none;mso-border-left-alt:0.5000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;mso-border-insideh:0.5000pt solid windowtext;mso-border-insidev:0.5000pt solid windowtext;mso-padding-alt:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;"><tbody><tr style="height:7.5500pt;"><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">函数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">方法</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">整数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">浮点数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr style="height:7.5500pt;"><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">2</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">移出</span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">vec_length</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">直接数据访问</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">7.02 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.03</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">7.17</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.0</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">2</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.02 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">&nbsp;</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">11.03</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.02 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">&nbsp;</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">11.03</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr></tbody></table><p>ok，我们可以看到，性能提升和理论配合的并不是很好，显然内循环中有其他的操作形成了瓶颈，限制性能超过了调用get_vec_element。我们继续做优化。</p><h3 id="消除不必要的内存引用"><a href="#消除不必要的内存引用" class="headerlink" title="消除不必要的内存引用"></a>消除不必要的内存引用</h3><p>combine3的代码将合并运算计算的值累积在dest指定的位置。在dest指针地址存放在寄存器中时，考虑到底层汇编，累计变量的数值都需要从内存读出再写入到内存。这样的读写是很浪费的。为了消除这种不必要的读写，我们按如下生成了combine4的代码。<br>把结果累积在临时变量中，将累积值存放在局部变量acc中，消除了每次循环迭代中从内存中读出并将更新值写回的需要:<br></p><pre class="line-numbers language-none"><code class="language-none">void combine4 (vec_ptr v, data_t *dest){    long i;    long length = vec_length(v);    data_t *data = get_vec_start(v);    data_t acc = IDENT;    for (i = 0; i &lt; length; i++) {        acc = acc OP data[i];    }    *dest = acc}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><table class="MsoTableGrid" border="1" cellspacing="0" style="border-collapse:collapse;border:none;mso-border-left-alt:0.5000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;mso-border-insideh:0.5000pt solid windowtext;mso-border-insidev:0.5000pt solid windowtext;mso-padding-alt:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;"><tbody><tr style="height:7.5500pt;"><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">函数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" rowspan="2" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">方法</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">整数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:1.0000pt solid windowtext;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">浮点数</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr style="height:7.5500pt;"><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">+ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr><tr><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:1.0000pt solid windowtext;mso-border-left-alt:0.5000pt solid windowtext;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">Combine</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">4</font></span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5000pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">直接数据访问</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;">直接数据访问</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">7.17 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.02&nbsp;</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1.27</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">.0</span><span style="font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">1</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td><td width="177" valign="top" style="width:106.5500pt;padding:0.0000pt 5.4000pt 0.0000pt 5.4000pt ;border-left:none;mso-border-left-alt:none;border-right:1.0000pt solid windowtext;mso-border-right-alt:0.5000pt solid windowtext;border-top:none;mso-border-top-alt:0.5000pt solid windowtext;border-bottom:1.0000pt solid windowtext;mso-border-bottom-alt:0.5000pt solid windowtext;"><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">9.02 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11.03</span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p><p class="MsoNormal"><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;"><font face="Calibri">3.01</font></span><span style="mso-spacerun:'yes';font-family:Calibri;mso-fareast-font-family:宋体;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="mso-spacerun:'yes';font-family:宋体;mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri;font-size:10.5000pt;mso-font-kerning:1.0000pt;">&nbsp;<font face="Calibri">5.01</font></span><span style="font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';font-size:10.5000pt;mso-font-kerning:1.0000pt;"><o:p></o:p></span></p></td></tr></tbody></table><p>在这操作之后，我们可以看到程序的性能有了显著的提升。</p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联邦学习</title>
      <link href="/2021/09/11/federatedlearning1/"/>
      <url>/2021/09/11/federatedlearning1/</url>
      
        <content type="html"><![CDATA[<h2 id="使用FATE框架开始联邦学习之路"><a href="#使用FATE框架开始联邦学习之路" class="headerlink" title="使用FATE框架开始联邦学习之路"></a>使用FATE框架开始联邦学习之路</h2><h3 id="联邦学习-Federated-Learning"><a href="#联邦学习-Federated-Learning" class="headerlink" title="联邦学习(Federated Learning)"></a>联邦学习(Federated Learning)</h3><ul><li><a href="https://federated.withgoogle.com/#top">便于理解的小漫画</a><br>联邦学习是谷歌在16年提出的一个概念，对谷歌来说主要是解决使用大量安卓用户数据来进行模型训练的隐私问题，虽然隐私问题在我们国家还是比较模糊，很多小游戏app都可能索要用户的所有权限，但是对它的研究肯定是有价值的。联邦学习对于打破数据孤岛，让数据产生更多的价值是很有意义的，对于目前的银行以及医疗等注重隐私的行业，都有很大的实际作用。不过在我看来联邦学习暂时也只能算一个概念，它涉及到同态加密，多方安全计算，学习模型的鲁棒性，机器学习的效率等等，这些单拉出来都可以作为一个研究方向，一个完美的联邦学习目前是不存在的。</li></ul><p>目前的联邦学习主要分为横向联邦学习(Horizontal Federated Learning)和纵向联邦学习(Vertical Federated Learning)以及联合迁移学习(Federated Transfer Learning)三种。他们主要是根据数据集来进行划分的，横向联邦是在两数据集用户特征重叠较多，用户重叠较少的情况下，将数据进行用户维度的切分，取出双方用户特征相同而用户不完全相同的那部分数据进行训练。比方说处于不同地区的两家银行，虽然用户交集很少，但是用户特征是比较相似的。纵向联邦则是在两个数据集的用户重叠较多而用户特征重叠重叠较小的情况，将数据集在特征维度进行切分，取出双方用户相同而用户特征不完全相同的部分进行训练。这个可以举个同一个地方的一家医院和一家银行的例子。迁移学习就是用户或是用户特征两者都不怎么重叠的情况下，不对数据切分，转而利用迁移学习来克服数据或是标签不足的情况。</p><h3 id="FATE框架"><a href="#FATE框架" class="headerlink" title="FATE框架"></a>FATE框架</h3><ul><li><p><a href="https://github.com/FederatedAI/FATE">FATE</a><br>FATE (Federated AI Technology Enabler) 是微众银行AI部门发起的开源项目，为联邦学习生态系统提供了可靠的安全计算框架。FATE项目使用多方安全计算 (MPC) 以及同态加密 (HE) 技术构建底层安全计算协议，以此支持不同种类的机器学习的安全计算，包括逻辑回归、基于树的算法、深度学习和迁移学习等。目前在github上有3.4k的star，算是大众比较认可的一个联邦学习框架，目前不支持windows，只支持mac和linux。有windows需要的可以转去用Pysyft。</p></li><li><p><a href="https://github.com/FederatedAI/FATE/blob/master/standalone-deploy/doc/Fate-standalone_deployment_guide_zh.md">FATE单机部署</a><br>这里提一下在虚拟机中安装FATE需要注意的事项：首先在ubuntu中安装python以及doceker，版本优先选择python3.6以及docker18.09。其次在用wget下载了压缩包后确认下载文件无误后再进行解压。测试步骤按照官方文档中进行即可。实际上在使用框架中还是要集群部署，在接下来几周我部署后可以更新下要注意的事项。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> deeplearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于程序的性能优化-part1</title>
      <link href="/2021/09/04/program-performance-optimization1/"/>
      <url>/2021/09/04/program-performance-optimization1/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="编写高效程序需要注意"><a href="#编写高效程序需要注意" class="headerlink" title="编写高效程序需要注意"></a>编写高效程序需要注意</h3><p>1、选择适当的算法和数据结构。</p><p>2、编写出编译器能够有效优化以转换成高效可执行代码的源代码。这一点需要理解优化编译器的能力和局限性。</p><p>3、处理运算量特别大的计算，需要在多核和多处理器的组合上并行运算。</p><h3 id="程序优化第一步"><a href="#程序优化第一步" class="headerlink" title="程序优化第一步"></a>程序优化第一步</h3><p>消除不必要的工作，让代码尽可能有效地执行所期望的任务。这里包括了消除不必要的函数调用、条件测试和内存引用。这些优化不依赖于目标机器的任何具体属性，主要是针对代码的。</p><h3 id="程序优化第二步"><a href="#程序优化第二步" class="headerlink" title="程序优化第二步"></a>程序优化第二步</h3><p>在此之前，我们需要一个目标机器的模型，致命如何处理指令以及各个操作的时序特性。比方说，编译器必须知道时序信息，才能确定使用一条乘法指令还是移位和加法的某种组合。目前计算机使用复杂的技术来处理机器级程序，并行的执行许多指令，执行顺序还可能不同于它们在程序中出现的顺序。程序员必须要理解这些机器如何工作，从而调整他们的程序来获取最大速度。</p><p>在了解了处理器的运作后，我们即可进行第二步，利用处理器提供的指令级并行(instruction-level parallelism)能力，同时执行多条指令。</p><h2 id="优化编译器的能力和局限性"><a href="#优化编译器的能力和局限性" class="headerlink" title="优化编译器的能力和局限性"></a>优化编译器的能力和局限性</h2><p>现代编译器运用复杂精细的算法来确定一个程序中计算的是什么值，以及它们是如何被使用的，之后会利用一些机会来简化表达式，在几个不同的地方使用同一个计算，以及降低一个给定的计算必须被执行的次数。一些编译器向用户提供了一些对它们使用的优化的控制，例如在GCC中最简单的控制便是指定优化级别。”-Og”是基本优化，而”-O1”,”-O2”,”-O3”则是让GCC使用更大量的优化，这样可以提高程序性能，但相应的也可能会增加程序的规模。对于大多数使用GCC的软件项目来说，优化级别-O2被定义为了可以被接受的标准，但还是主要考虑-O1级别编译出的代码。</p><h3 id="第一个妨碍优化的因素"><a href="#第一个妨碍优化的因素" class="headerlink" title="第一个妨碍优化的因素"></a>第一个妨碍优化的因素</h3><p>编译器必须很小心地对程序只使用<strong>安全</strong>的优化，这里的安全是指在程序可能遇到的所有可能情况下，在C语言标准提供的保证之下，优化后得到的程序和未优化版本有一样的行为。</p><p>我们用两个函数举一个栗子：<br></p><pre class="line-numbers language-none"><code class="language-none">void twiddle1(long *xp, long *yp){      *xp += *yp;      *xp += *yp;}void twiddle1(long *xp, long *yp){      *xp += 2* *yp;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><p>乍一看的话，两程序好像是有相同的行为，都是将储存在由指针yp指示的位置处的值两次加到xp指针指示的位置出的值。另一方面，函数twiddle2效率要高些。因为它只要求了3此内存引用(读 <em>xp，读</em>yp，写<em>xp)，而twiddle1则需要六次(两次读 </em>xp，两次读<em>yp，两次写</em>xp)，因此我们会认为基于第二个函数执行的计算能产生更有效的代码。</p><p>不过如果考虑到xp等于yp的情况的话，此时函数twiddle1会执行下列运算：</p><pre class="line-numbers language-none"><code class="language-none">*xp += *xp; /* Double value at xp */*xp += *xp; /* Double value at xp */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其结果便是xp的值增加四倍，而twiddle2会执行下列运算：<br></p><pre class="line-numbers language-none"><code class="language-none">*xp += 2* *xp; /* Trible value at xp */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>现在就不一样了，程序二让xp的值增加了3倍，是不是很神奇。<p></p><p>编译器是不知道twiddle1会被如何调用的，因此他必须考虑到参数xp和yp相等的情况，所以他不会产生twiddle2风格代码作为twiddle1的优化版本。</p><p>这中两个指针可能指向同一内存位置的情况称为<strong>内存别名使用</strong>（memory aliasing）。在只执行安全的优化中，编译器必须假设不同的指针可能会指向内存中的同一位置。</p><h3 id="第二个妨碍优化的因素"><a href="#第二个妨碍优化的因素" class="headerlink" title="第二个妨碍优化的因素"></a>第二个妨碍优化的因素</h3><p>我们先举一个栗子：</p><pre class="line-numbers language-none"><code class="language-none">long f();long func1() {      return f() + f() + f() + f();}long func2() {     return 4*f();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，这个例子看上去两个过程计算的都是一样的结果，但是func2只调用了f一次，而func1调用了f四次。要是你写了func1风格的代码，你可能会想要改成func2的样子。</p><p>不过考虑一下下面的f代码：</p><pre class="line-numbers language-none"><code class="language-none">long counter = 0;long f() {     return counter++;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数有个副作用，——它修改了全局程序状态的一部分，改变调用它的次数会改变程序的行为，我们假设一种情况，在开始时全局变量counter都设置为0，对于func1的调用会返回0+1+2+3=6，而对func2的调用呢，则会返回4*0=0。</p><p>大多数编译器不会试图判断一个函数有没有副作用，如果没有，可能会被优化成func2的样子，相反，编译器会假设最糟糕的情况，并保持所有函数调用不变。</p><h2 id="表示程序性能"><a href="#表示程序性能" class="headerlink" title="表示程序性能"></a>表示程序性能</h2><p>我们引入度量标准每元素的周期数(Cycles Per Element),简称为CPE作为一种表示程序性能并指导我们改进代码的方法。CPE可以帮我们在更细节的级别上理解迭代程序的循环性能。很适合度量执行重复计算的程序。</p><p>处理器活动的顺序是由时钟来控制的，时钟提供了某个频率的规律信号，通常用GHz即千兆赫兹（1000000000周期/s）来表示。如果一个系统是4GHz的处理器，那就表示处理器时钟运行赫兹是每秒4*10^9个周期。每个时钟周期的时间就是时钟赫兹的倒数。那么一个4GHz的时钟周期就是0.25纳秒或者250皮秒，从程序员的角度来理解，用时钟周期来度量标准还是要比纳秒皮秒好的多，用时钟周期，度量值表示的是执行了多少条指令。</p><p>举个栗子表示下我们对CPE度量的使用：<br>下面两个函数都是用来计算长度为n的向量的前置和，对于向量a和前置和p的定义为<br>p0 = a0<br>pi = pi-1 + ai，1≤i＜n</p><pre class="line-numbers language-none"><code class="language-none">void psum1(float a[], float p[], long n){      long i;      p[0] = a[0];      for (i = 1; i&lt;n; i++)           p[i] = p[i-1] + a[i];}void psum2(float a[], float p[], long n){      long i;      p[0] = a[0];      for (i = 1; i&lt;n-1; i+=2) {           float mid_val = p[i-1] + a[i];           p[i] = mid_val;           p[i+1] = mid_val + a[i+1];      }      if (i &lt; n)          p[i] = p[i-1] + a[i];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，函数psum1每次迭代计算结果的一个元素。第二个函数则使用循环展开的技术，每次迭代计算了两个元素。</p><p>这样一个过程所需时间可以用一个常数加上一个与被处理元素个数成正比的因子来描述。使用最小二乘法拟合后，psum1个psum2的运行时间约为368+9.0n和368+6.0n，这两个式子表示了对代码的计时和初始化过程、准备循环以及完成过程的开销为368个周期加上每个元素6.0或9.0周期的线性因子。对于较大的n值，运行时间主要就由线性因子来决定。这些项的系数称为每元素的周期数(CPE)的有效值。在这个例子中，psum2的CPE为6.0，优于9.0的psum1。</p><p>未完待续…</p>]]></content>
      
      
      
        <tags>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug</title>
      <link href="/2021/08/30/guan-yu/"/>
      <url>/2021/08/30/guan-yu/</url>
      
        <content type="html"><![CDATA[<h3 id="whosbug项目总结"><a href="#whosbug项目总结" class="headerlink" title="whosbug项目总结"></a>whosbug项目总结</h3><p>  为其十五天，从第二天开始做Golang版本，完成了导师方面制定的基本需求，虽然对算法方面是很有欠缺，但是目前来看解决方式也是要跑xgboost这些机器学习解决好一点，就算来再多的参数，没办法确定每个特征的重要性，还是没有什么实质性的效果。这些天加班加点，到最后不知道给评委的感觉怎么说，不过做了十四天Golang，我回答的问题主要还是在Python的协程并发方面的东西，确实有些紧张了，只能说有时候答辩这种东西也是比较需要运气。第一次的和企业有关的项目，有所收获和体会。</p>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缺陷引入分析技术相关之SZZ算法</title>
      <link href="/2021/08/21/szz/"/>
      <url>/2021/08/21/szz/</url>
      
        <content type="html"><![CDATA[<p>此算法来源于2005年由瑞典德隆大学的一篇论文《When Do Changes Induce Fixes》，作者分别名为Jacek Sliwerski,Thomas Zimmermann,Andreas Zeller。显然算法名取自他们姓的首字母。</p><p>对算法来说，数据是不可缺少的一环，机器学习名宿吴恩达就认为80%的数据加上20%的模型是一个更好的机器学习，可见数据对于算法工作的重要性。</p><p>而SZZ的框架也主要是有四个步骤：</p><p>识别缺陷修复的变更，识别被修复的缺陷，识别可能引入缺陷的变更，以及最终的噪音消除。</p><p>目前MIT License有关于该算法的开源实现。</p><ul><li><a href="https://github.com/wogscpar/SZZUnleashed">SZZ</a></li></ul><p>算法在github中的实现流程：</p><p>识别缺陷修复变更：</p><p>这里可以在github中的issue中通过关键字进行搜索</p><pre class="line-numbers language-none"><code class="language-none">is:issue is:closed label:"Type: Bug"  -label:"Resolution: Duplicate" -label:"Type: Needs Investigation" -label:"Status: Unconfirmed" -label:"Resolution: Needs More Information" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>识别被修复的缺陷:</p><p>找到fixed issue，找到相关代码提交的pull request。记住提交的文件名以及行号。</p><p>识别可能引入缺陷的变更：</p><p>通过git log找到之前提交信息的上一条提交，切换版本，查看之前的文件名是通过哪个版本引入的，之后查看相应版本的提交。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 技术分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug前置学习5</title>
      <link href="/2021/08/14/whosbug5/"/>
      <url>/2021/08/14/whosbug5/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-8-7"><a href="#2021-8-7" class="headerlink" title="2021/8/7"></a>2021/8/7</h2><p>有通过本地部署服务器的端口 <a href="http://127.0.0.1:8081/api-token-auth/">http://127.0.0.1:8081/api-token-auth/</a> 获取token再在post的内容中加入得到的token，也尝试过在webservice中禁用掉csrftoken的功能，但是但是还是会有403报错。进入127.0.0.1：8081/swagger/ 后发现如果不登录django，直接post也是会被403拒绝掉。</p><p>在code_diff.py文件中尝试使用gevent第三方库做基于协程的并发，发现django和gevent的monkey.patch_all有所冲突。</p><h2 id="2021-8-9"><a href="#2021-8-9" class="headerlink" title="2021/8/9"></a>2021/8/9</h2><p>和小组成员开会对这些天做的内容以及之后工作的方向进行了讨论，尝试找用于swift中用java编写的javaSupport文件，未果，目前来看对swift解析首先得把这个文件用python重写一遍。</p><p>尝试使用gevent并发框架对codediff文件进行并发编程，目前存在很多问题。</p><p>之前做的csharp解析有些问题，进行修改。</p><h2 id="2021-8-12"><a href="#2021-8-12" class="headerlink" title="2021/8/12"></a>2021/8/12</h2><p>试了一下跑大型项目，拉了springboot的仓库，有memory error的问题，改了get_diff里popen的缓冲方式，就不会报错了，也要打一个gevent的猴子补丁，不然速度会相当慢，感觉算是解决了冷启动的问题吧。<br>测试跑了一下午的时间，毕竟3万多的commit，后续主要得对性能做一些优化，隔壁学校是用go重构以及数据结构等的优化，这几天找一下方向，正式开始就开肝吧。</p><p>8/14更新：<br>多拉了几个仓库测试，发现冷启动还是存在问题，之前测试的springboot因为成功一次之后，再次跑这个仓库就不会报错（那次成功的原因现在有点迷了），拉的几个新仓库还是会有memory error，后续还要针对冷启动做一些工作。</p>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug前置学习4</title>
      <link href="/2021/08/07/whosbug4/"/>
      <url>/2021/08/07/whosbug4/</url>
      
        <content type="html"><![CDATA[<h2 id="2021-8-1"><a href="#2021-8-1" class="headerlink" title="2021/8/1"></a>2021/8/1</h2><p>了解学习gevent第三方用于python并发的库</p><h2 id="2021-8-3"><a href="#2021-8-3" class="headerlink" title="2021/8/3"></a>2021/8/3</h2><h3 id="学习写python中的并发"><a href="#学习写python中的并发" class="headerlink" title="学习写python中的并发"></a>学习写python中的并发</h3><h3 id="CSharpLexer-py中存在问题"><a href="#CSharpLexer-py中存在问题" class="headerlink" title="CSharpLexer.py中存在问题"></a>CSharpLexer.py中存在问题</h3><p>他的部分代码使用半java半python的方式（python里面的if用大括号，用++来自增，也使用了不属于python的方法），上面还用了c#的using，stackoverflow里面没有找到合理的解决方式。</p><pre class="line-numbers language-none"><code class="language-none">private int interpolatedStringLevel;private Stack&lt;bool&gt; interpolatedVerbatiums = new Stack&lt;bool&gt;();private Stack&lt;int&gt; curlyLevels = new Stack&lt;int&gt;();private bool verbatium;def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):    if self._actions is None:        actions = dict()        actions[121] = self.INTERPOLATED_REGULAR_STRING_START_action        actions[122] = self.INTERPOLATED_VERBATIUM_STRING_START_action        actions[123] = self.OPEN_BRACE_action        actions[124] = self.CLOSE_BRACE_action        actions[131] = self.COLON_action        actions[171] = self.OPEN_BRACE_INSIDE_action        actions[174] = self.DOUBLE_QUOTE_INSIDE_action        actions[178] = self.CLOSE_BRACE_INSIDE_action        self._actions = actions    action = self._actions.get(ruleIndex, None)    if action is not None:        action(localctx, actionIndex)    else:        raise Exception("No registered action for:" + str(ruleIndex))def INTERPOLATED_REGULAR_STRING_START_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 0:         interpolatedStringLevel++; interpolatedVerbatiums.Push(false); verbatium = false;def INTERPOLATED_VERBATIUM_STRING_START_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 1:         interpolatedStringLevel++; interpolatedVerbatiums.Push(true); verbatium = true;def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 2:        if (interpolatedStringLevel &gt; 0)        {            curlyLevels.Push(curlyLevels.Pop() + 1);        }def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 3:        if (interpolatedStringLevel &gt; 0)        {            curlyLevels.Push(curlyLevels.Pop() - 1);            if (curlyLevels.Peek() == 0)            {                curlyLevels.Pop();                Skip();                PopMode();            }        }def COLON_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 4:        if (interpolatedStringLevel &gt; 0)        {            int ind = 1;            bool switchToFormatString = true;            while ((char)InputStream.LA(ind) != '}')            {                if (InputStream.LA(ind) == ':' || InputStream.LA(ind) == ')')                {                    switchToFormatString = false;                    break;                }                ind++;            }            if (switchToFormatString)            {                Mode(INTERPOLATION_FORMAT);            }        }def OPEN_BRACE_INSIDE_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 5:         curlyLevels.Push(1);def DOUBLE_QUOTE_INSIDE_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 6:         interpolatedStringLevel--; interpolatedVerbatiums.Pop();            verbatium = (interpolatedVerbatiums.Count &gt; 0 ? interpolatedVerbatiums.Peek() : false);def CLOSE_BRACE_INSIDE_action(self, localctx:RuleContext , actionIndex:int):    if actionIndex == 7:         curlyLevels.Pop();def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):    if self._predicates is None:        preds = dict()        preds[172] = self.REGULAR_CHAR_INSIDE_sempred        preds[173] = self.VERBATIUM_DOUBLE_QUOTE_INSIDE_sempred        preds[175] = self.REGULAR_STRING_INSIDE_sempred        preds[176] = self.VERBATIUM_INSIDE_STRING_sempred        self._predicates = preds    pred = self._predicates.get(ruleIndex, None)    if pred is not None:        return pred(localctx, predIndex)    else:        raise Exception("No registered predicate for:" + str(ruleIndex))def REGULAR_CHAR_INSIDE_sempred(self, localctx:RuleContext, predIndex:int):        if predIndex == 0:            return  !verbatiumdef VERBATIUM_DOUBLE_QUOTE_INSIDE_sempred(self, localctx:RuleContext, predIndex:int):        if predIndex == 1:            return   verbatiumdef REGULAR_STRING_INSIDE_sempred(self, localctx:RuleContext, predIndex:int):        if predIndex == 2:            return  !verbatiumdef VERBATIUM_INSIDE_STRING_sempred(self, localctx:RuleContext, predIndex:int):        if predIndex == 3:            return   verbatium<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2021-8-4"><a href="#2021-8-4" class="headerlink" title="2021/8/4"></a>2021/8/4</h2><p>修改了之前提到的CSharpLexer中的错误代码，现在基本可以正常使用。</p><p>查看kotlin的相应代码，没有存在类似问题，语言解析方面应该就不会有太大的问题了。</p><p>主要还是并发怎么做的问题，也在学习相应的python第三方库。</p><h2 id="2021-8-6"><a href="#2021-8-6" class="headerlink" title="2021/8/6"></a>2021/8/6</h2><p>将django_request中的腾讯内网网址改成本地部署的服务器端口，注释掉没有使用的关于NewMonkey的函数，在调用到相关函数时服务器报了403错误</p><p>IDE显示：</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/blogimages/test4.png?raw=true" alt="图片"></p><p>服务器端：</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/blogimages/test5.png?raw=true" alt="图片"></p><p>查看了相关的django文档和stackoverflow的问答：</p><p><a href="https://www.django-rest-framework.org/api-guide/authentication/#how-authentication-is-determined">文档链接</a></p><p>应该是csrftoken或者post中参数的问题，目前还没有解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug前置学习3</title>
      <link href="/2021/07/31/whosbug3/"/>
      <url>/2021/07/31/whosbug3/</url>
      
        <content type="html"><![CDATA[<h1 id="项目日志"><a href="#项目日志" class="headerlink" title="项目日志"></a>项目日志</h1><h2 id="7-25"><a href="#7-25" class="headerlink" title="7/25"></a>7/25</h2><h3 id="ast-processor存在的问题"><a href="#ast-processor存在的问题" class="headerlink" title="ast_processor存在的问题"></a>ast_processor存在的问题</h3><p>在对Cpp解析的过程中发现原本Java解析中的compliationUnit函数在cpp中为translationUnit，说明了ast_processor这个文件还得根据语言适配。</p><h3 id="基本完成对CPP的解析"><a href="#基本完成对CPP的解析" class="headerlink" title="基本完成对CPP的解析"></a>基本完成对CPP的解析</h3><p>不知道是否符合要求，解析结果如下所示：</p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><pre class="line-numbers language-none"><code class="language-none">#include&lt;iostream&gt;#include&lt;stack&gt;using namespace std;class CNode{public:    char data;    CNode* left;    CNode* right;    CNode()    {        left = right = NULL;    }};class BiTree : public CNode{public:    CNode* Root;    int pos;    string strTree;    BiTree(string str)    {        pos = 0;        strTree = str;        Root = CreateBiTree();    }    CNode* CreateBiTree(string str,int in,double dou)    {        CNode* T;        char ch;        ch = strTree[pos];        pos++;        if (ch == '0')        {            T = NULL;        }        else        {            T = new CNode();            T-&gt;data = ch;            T-&gt;left = CreateBiTree();            T-&gt;right = CreateBiTree();        }        return T;    }    void nonPre()    {        CNode* T = Root;        stack&lt;CNode*&gt;S;        while (T || !S.empty())        {            while (T)            {                cout &lt;&lt; T-&gt;data;                S.push(T);                T = T-&gt;left;            }            if (!S.empty())            {                T = S.top();                S.pop();                T = T-&gt;right;            }        }    }    void nonPost()    {        int tag;///0不可访问，1可访问        stack&lt;CNode*&gt;S1;///结点        stack&lt;int&gt;S2;///tag        CNode* T = Root;        if (Root == NULL)            return;        CNode* p = T;        do        {            while (p != NULL)            {                S1.push(p);                S2.push(0);                p = p-&gt;left;            }            if (S1.empty())                break;            if (p == NULL)            {                tag = S2.top();                if (tag == 0)                {                    tag = 1;                    S2.pop();                    S2.push(tag);                    p = S1.top()-&gt;right;                }                else if (tag == 1)                {                    p = S1.top();                    S1.pop();                    S2.pop();                    cout &lt;&lt; p-&gt;data;                    p = NULL;                }            }        } while (!S1.empty());    }};int main(){    int T;    cin &gt;&gt; T;    while (T--)    {        string str;        cin &gt;&gt; str;        BiTree tree(str);        tree.nonPost();        cout &lt;&lt; endl;    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><pre class="line-numbers language-none"><code class="language-none">Start line: 12 | End line: 15 | Method name: CNodeStart line: 24 | End line: 29 | Method name: BiTreeStart line: 30 | End line: 48 | Method name: CreateBiTreeStart line: 49 | End line: 68 | Method name: nonPreStart line: 69 | End line: 108 | Method name: nonPostStart line: 111 | End line: 124 | Method name: main2021-07-26 12:51:29 - ast_processor - 12668 - DEBUG : Display all data extracted by AST. {'classes': [{'className': 'CNode', 'depth': 9, 'endLine': 16, 'inheritance': '', 'masterObject': {}, 'startLine': 6},             {'className': 'BiTree', 'depth': 9, 'endLine': 109, 'inheritance': ':publicCNode', 'masterObject': {}, 'startLine': 18}], 'methods': [{'depth': 12,              'endLine': 15,              'masterObject': {'objectName': 'classCNode', 'startLine': 6},              'methodName': 'CNode',              'params': [],              'returnType': 'void',              'startLine': 12},             {'depth': 12,              'endLine': 29,              'masterObject': {'objectName': 'classBiTree:publicCNode', 'startLine': 18},              'methodName': 'BiTree',              'params': [{'paramName:': 'str', 'paramType:': 'string'}],              'returnType': 'void',              'startLine': 24},             {'depth': 12,              'endLine': 48,              'masterObject': {'objectName': 'classBiTree:publicCNode', 'startLine': 18},              'methodName': 'CreateBiTree',              'params': [{'paramName:': 'str', 'paramType:': 'string'},                         {'paramName:': 'in', 'paramType:': 'int'},                         {'paramName:': 'dou', 'paramType:': 'double'}],              'returnType': 'CNode',              'startLine': 30},             {'depth': 12,              'endLine': 68,              'masterObject': {'objectName': 'classBiTree:publicCNode', 'startLine': 18},              'methodName': 'nonPre',              'params': [],              'returnType': 'void',              'startLine': 49},             {'depth': 12,              'endLine': 108,              'masterObject': {'objectName': 'classBiTree:publicCNode', 'startLine': 18},              'methodName': 'nonPost',              'params': [],              'returnType': 'void',              'startLine': 69},             {'depth': 4,              'endLine': 124,              'masterObject': {},              'methodName': 'main',              'params': [{'paramName:': 'str', 'paramType:': ''}],              'returnType': 'int',              'startLine': 111}], 'namespace': ['std']}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-28"><a href="#7-28" class="headerlink" title="7/28"></a>7/28</h2><h3 id="在本地whosbug-CI添加了对cpp的解析功能"><a href="#在本地whosbug-CI添加了对cpp的解析功能" class="headerlink" title="在本地whosbug_CI添加了对cpp的解析功能"></a>在本地whosbug_CI添加了对cpp的解析功能</h3><h3 id="测试仓库：CarND-Kidnapped-Vehicle-Project"><a href="#测试仓库：CarND-Kidnapped-Vehicle-Project" class="headerlink" title="测试仓库：CarND-Kidnapped-Vehicle-Project"></a>测试仓库：CarND-Kidnapped-Vehicle-Project</h3><h3 id="command-line运行结果："><a href="#command-line运行结果：" class="headerlink" title="command_line运行结果："></a>command_line运行结果：</h3><pre class="line-numbers language-none"><code class="language-none">enter WhosbugAssignproject_id: whosbug_test_1release: 1.0.0repo_path: D:\testProject\multiple-object-tracking-lidarbranch_name: D:\testProject\multiple-object-tracking-lidarchange work path:  D:\testProject\multiple-object-tracking-lidarb'&lt;html&gt;\r\n&lt;head&gt;&lt;title&gt;504 Gateway Time-out&lt;/title&gt;&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;center&gt;&lt;h1&gt;504 Gateway Time-out&lt;/h1&gt;&lt;/center&gt;\r\n&lt;hr&gt;&lt;center&gt;ias/1.3.5.6_1.17.3&lt;/center&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;\r\n'last release's commit hash:  Nonenew release's commit hash:  f1aec75f7dd46d5f6af3b131be4354822e63c587change work path:  D:\whosbug\whosbug_CI\WhosbugAssignmain.cppANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1Start line: 79 | End line: 82 | Method name: euclidean_distanceStart line: 104 | End line: 123 | Method name: findIndexOfMinStart line: 124 | End line: 330 | Method name: KFTStart line: 331 | End line: 338 | Method name: publish_cloudStart line: 341 | End line: 704 | Method name: cloud_cbStart line: 709 | End line: 748 | Method name: mainmain.cppANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1Start line: 79 | End line: 82 | Method name: euclidean_distanceStart line: 104 | End line: 123 | Method name: findIndexOfMinStart line: 124 | End line: 330 | Method name: KFTStart line: 331 | End line: 338 | Method name: publish_cloudStart line: 341 | End line: 698 | Method name: cloud_cbStart line: 703 | End line: 743 | Method name: mainmain.cppmain_naive.cppANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1line 794:37 mismatched input ';' expecting {'}', ','}line 832:0 missing '}' at '&lt;EOF&gt;'Start line: 79 | End line: 82 | Method name: euclidean_distanceStart line: 104 | End line: 123 | Method name: findIndexOfMinStart line: 124 | End line: 352 | Method name: KFTStart line: 353 | End line: 360 | Method name: publish_cloudStart line: 363 | End line: 831 | Method name: cloud_cbANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1Start line: 71 | End line: 74 | Method name: euclidean_distanceStart line: 95 | End line: 244 | Method name: KFTStart line: 245 | End line: 252 | Method name: publish_cloudStart line: 255 | End line: 559 | Method name: cloud_cbStart line: 564 | End line: 603 | Method name: mainmain.cppANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1line 95:0 no viable alternative at input 'voidKFT(conststd_msgs::Float32MultiArray::ConstPtr&amp;ccs)void'line 247:44 mismatched input ';' expecting {'}', ','}Start line: 70 | End line: 73 | Method name: euclidean_distanceStart line: 95 | End line: 225 | Method name: KFTStart line: 226 | End line: 233 | Method name: publish_cloudStart line: 235 | End line: 547 | Method name: mainStart line: 552 | End line: 592 | Method name: mainCKalmanFilter.cppfeatureDetection.cppmain.cppANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1line 73:0 no viable alternative at input 'Nonewlineatendoffile'Start line: 8 | End line: 29 | Method name: ::CKalmanFilterStart line: 32 | End line: 34 | Method name: ::~CKalmanFilterStart line: 37 | End line: 43 | Method name: CKalmanFilter::predictStart line: 46 | End line: 71 | Method name: CKalmanFilter::updateANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1Start line: 8 | End line: 19 | Method name: ::featureDetectionStart line: 21 | End line: 23 | Method name: ::~featureDetectionStart line: 28 | End line: 69 | Method name: featureDetection::filteringPipeLineStart line: 73 | End line: 116 | Method name: featureDetection::houghTransformStart line: 121 | End line: 156 | Method name: featureDetection::ransacStart line: 159 | End line: 206 | Method name: featureDetection::lineItrStart line: 209 | End line: 224 | Method name: featureDetection::findIntersectionStart line: 227 | End line: 233 | Method name: featureDetection::visualizeStart line: 236 | End line: 286 | Method name: mainANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1ANTLR runtime and generated code versions disagree: 4.9.1!=4.7.1Start line: 44 | End line: 47 | Method name: euclidean_distanceStart line: 68 | End line: 193 | Method name: KFTStart line: 196 | End line: 285 | Method name: mainpid:  whosbug_test_1release:  1.0.0whosbug analysis doneProcess finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成的res-json文件"><a href="#生成的res-json文件" class="headerlink" title="生成的res.json文件"></a>生成的res.json文件</h3><pre class="line-numbers language-none"><code class="language-none">{    "objects": [        {            "commit_time": "2019-04-26T04:57:22-04:00",            "file_path": "zxbRhdsCDns=",            "hash": "lUID3iCHQGHBpYizAxiMQjkJy3Z3Dj71d3qacc+AwRxQqFW1hIu2kpZBu3tK+WXFsoprOBlxXNAq8LGY5hWx+w==",            "name": "wfknvDHDgHI=",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+FaNpeSO1kQYC2O3OuIU2z2iJRmJ/Wq6w==",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "kbT65sbEzPzdk9PsPZ4eW+AMNTe6xF1RjiC74LZJANoFZw4hcLbRwLi1UVgYdBduE7zISfTz+GwHLyhAsBBBzw==",            "name": "x1UR6F+INMMuhxiefmCcEdt+",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "l0QbEWFf0Q95N7gEjcXv9IOHwshSUNI05+a0AaFkYBCW5BIzKsLNBNBNwz+ItiysUU7wlCHGqd71UhlS0tsOEw==",            "name": "xIvrCzNmE4O0Vit4tEI=",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "xIasBblPdojdWhpJAb3R+d41IDCUE+yWnRvtNXcnp9tOFSNPRw3PxEfO5+BX3MbOfT5K7haNDwRdzdgEMwQhTQ==",            "name": "6ZGL",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhapK3iHGnPl7LTA=",            "hash": "w3lzf7oXgZTIZrx3VF7pejfATu4YvgLN9MxjHsOQqzpE1JYsLWOp85scnSJBgyNpsbUtETImHy8aI9leUhX5wA==",            "name": "x1UR6F+INMMuhxiefmCcEdt+",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhapK3iHGnPl7LTA=",            "hash": "xID53T07DHvJ3Ze2PvJMzQYLiVGpeCmYRC4gFgG2bjiVC7NVnI8H4Bi8ETfeKHWuMvkKWITHDl0YPOGdbCGp2Q==",            "name": "6ZGL",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhapK3iHGnPl7LTA=",            "hash": "kh9Y6rYs9kDkyhiwqu6e+fcmpwY6YUc+6riUwG5xXPhycatvbBDRjy3TJmC/DXh54a8vwY/W3W9Eb8g16JQP/g==",            "name": "0ha9Wc6aQfr4se5YtQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhapK3iHGnPl7LTA=",            "hash": "mqvJSOm88oFYfa7uXOfo8niV38Tq7HwoWmf8rO/05kuWjTTj5MgdZtadorW+qSqSkCiIgC1gmty5/hwYhDh3Gw==",            "name": "wfknvDHDgHI=",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-10T17:13:49-05:00",            "file_path": "zxbRhapK3iHGnPl7LTA=",            "hash": "m5qTfTjg2UUiH98+1o72chAUXkzar3kI88VzCk3Lcct7ljhsYGeqfxzYzm4P9bAsWRsfkaAjDGEFr0bd/2qlFA==",            "name": "zxbRhQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T21:05:32-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "kbT65sbEzPzdk9PsPZ4eW+AMNTe6xF1RjiC74LZJANoFZw4hcLbRwLi1UVgYdBduE7zISfTz+GwHLyhAsBBBzw==",            "name": "x1UR6F+INMMuhxiefmCcEdt+",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T21:05:32-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "xIasBblPdojdWhpJAb3R+d41IDCUE+yWnRvtNXcnp9tOFSNPRw3PxEfO5+BX3MbOfT5K7haNDwRdzdgEMwQhTQ==",            "name": "6ZGL",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T21:05:32-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "w3ipktsVGShh74BIRrLyZbEOtxoWZQpcCandTMXujxznsEdnDL21powJkl5geqbMBJ7/7PXgyFVgQeEukdjVIg==",            "name": "0ha9Wc6aQfr4se5YtQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T21:05:32-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "khJ61sW+vw1i7KWxflH6bpnaV4eQzR9IZn3Tf/zT7KZ1TnUsu8TPvmKopq1ijsfcnCdk+hlqIlPGnOQuD5pSng==",            "name": "zxbRhQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T21:05:32-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "khJ61sW+vw1i7KWxflH6bpnaV4eQzR9IZn3Tf/zT7KZ1TnUsu8TPvmKopq1ijsfcnCdk+hlqIlPGnOQuD5pSng==",            "name": "zxbRhQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "4Q1fm25MEphN0VUCXl4HD2k=",            "hash": "lRHZoYM7S7HIFsahtVfTjvk8eBMLIEiPaLxXhInhznvOwe65xAUOSC9yp4WrWOhVZQXUbvIqLFPfJcihVMdnnw==",            "name": "mFIdf729kyKm1I0GVCnm",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "4Q1fm25MEphN0VUCXl4HD2k=",            "hash": "x0HzjjFgDDiMJW4LFHFC/kKLh25zEQB7MIOsEoUSl4T3xsRZ6P6TqsyWBo7jn96YsGhwC/cVZg9USNn9JDX+cQ==",            "name": "mFIgCoakBk0yCDFH0Rdp3g==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "4Q1fm25MEphN0VUCXl4HD2k=",            "hash": "keBvwEBdgzLsvj3AmOwci0YpbITgQG3qoRs9bdqw/H9Dr+K3b5vry3DXqE/rCrMeVD0epQRxf8XFEJKDZLuPBg==",            "name": "4Q1fm25MEphN0VUCXkpzrGYPekb6aA==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "4Q1fm25MEphN0VUCXl4HD2k=",            "hash": "xlHweJyMtyPSFmlLIpvE1peeuu85SCZVoo7R33rR3Rp4futA9MqjOwY8bsg40bIMeYJl+WQVy7wmt4mfE4kslw==",            "name": "4Q1fm25MEphN0VUCXkpzqZiYBsL/",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "k9e/civny6RcB6QPCs42dlrbmC2aNlNr6rt0hFUkwvSYrYgp5ivJXamTLm9Y05Rdk3MLlz2yeQX6+j1aKRGm9w==",            "name": "mFI4WiR21kUm9ed18fqb5g57",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "k4V4/14vb/x/WgO9LjNsALayuiU+ZHaDq6pdmk6bZy9YjJv6pR5SungKBCXlFgsfyu4FhE6sHFLDpJEGpIVKjw==",            "name": "mFIgL9ATAnpW3BCe7JQFBZaFfg==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "xxFoJht8y9dJZE2qqQtYBQTu2rOPFcJ3wIDf7qArh2b9HaOmuO5pnU2ZF2KNbMeNgQvyb0IrP0k4ZgJnjfsMWA==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxDvq4VlHkLqyW6cMmjWD6CYU=",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "xNGm0lSJ9XRB+zNy1rdZT3WwEmP+DJ7vrqK1nqfUuDtrkkeORNMlzM+rK3gZOc071NJQcJggBLIxjeMauqhPOA==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxAJpysuzFG0kVDsYif5M=",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "lUT4J09d+G3d1HPeTIs/IO25oMSDqURzotfpyMXZxmDjv8DrBciacxpNQrIhhIi96rF85TcaeQI2YUgiL3XFiA==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxGsowMcgh",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "xNWE4UUKmPq1uUcpjuLQW/f0Cdk7TV/AfxpzmW3isb4c7TRk/H7Do8yQY0n1UKr8mZWVeoMDQXH/zJNGAgGYMQ==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxBAWfg/VTFw==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "k4UohCWwBGxLYMJRuOLoBgrCQzLkYpNUAQv6m1ndYqRziyE6t7lP+9G3QBKRNk1VNDek4DNeDMb9+ROvnf96pw==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxDvq6nznONrqd939ypRQnfg==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "luhWqGBE5rp/SPvBNZiSDvYp3hW04TnHoarCm0XaDxKbvwtviTS5HEYwOQ3C8nBwpUw3cHR3m26GpqcoNHIWyQ==",            "name": "xIfHu8FKHC3NNTRzccM5n4sxHj0kZxrW0/h+",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "xIfHu8FKHC3NNTRzccM5n58Eyo0=",            "hash": "lRSYk8j/CsN1zuxzQP2zzOnIoSNMukRS1jPzPDVVXUAGJRVjrnywuzITYN8sUuior8XXWyGJRswGIPdQ5No17w==",            "name": "zxbRhQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "kbT65sbEzPzdk9PsPZ4eW+AMNTe6xF1RjiC74LZJANoFZw4hcLbRwLi1UVgYdBduE7zISfTz+GwHLyhAsBBBzw==",            "name": "x1UR6F+INMMuhxiefmCcEdt+",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "xIasBblPdojdWhpJAb3R+d41IDCUE+yWnRvtNXcnp9tOFSNPRw3PxEfO5+BX3MbOfT5K7haNDwRdzdgEMwQhTQ==",            "name": "6ZGL",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        },        {            "commit_time": "2015-12-07T17:20:12-05:00",            "file_path": "zxbRhdsCDns=",            "hash": "khJ61sW+vw1i7KWxflH6bpnaV4eQzR9IZn3Tf/zT7KZ1TnUsu8TPvmKopq1ijsfcnCdk+hlqIlPGnOQuD5pSng==",            "name": "zxbRhQ==",            "old_name": "",            "owner": "8p4XZx/FP3KsQIO5PQFV8KuDRxlkcNzZc+EbdSmLLez34IsgvKBiG8FuKbo=",            "parent_hash": "",            "parent_name": ""        }    ],    "project": {        "pid": "1RBnaS7myzjj+BNGrAE="    },    "release": {        "commit_hash": "xNO+n/Qa+eVnNJZxiMtLKx+aBCzJEXNn1lRHRfeiyCXfqxtYLxG3wg==",        "release": "k5tG5ZE="    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="浏览swagger的api"><a href="#浏览swagger的api" class="headerlink" title="浏览swagger的api"></a>浏览swagger的api</h3><h2 id="7-30"><a href="#7-30" class="headerlink" title="7/30"></a>7/30</h2><h3 id="学习关于csrf鉴权问题："><a href="#学习关于csrf鉴权问题：" class="headerlink" title="学习关于csrf鉴权问题："></a>学习关于csrf鉴权问题：</h3><p><a href="https://blog.csdn.net/qq_36019490/article/details/89470407?utm_medium=distribute.wap_relevant.none-task-blog-2%7Edefault%7EsearchFromBaidu%7Edefault-7.wap_withpaiwithsearchfrombaidu&amp;depth_1-utm_source=distribute.wap_relevant.none-task-blog-2%7Edefault%7EsearchFromBaidu%7Edefault-7.wap_withpaiwithsearchfrombaidu">csrf</a></p><h3 id="了解学习python中的协程池以及并发"><a href="#了解学习python中的协程池以及并发" class="headerlink" title="了解学习python中的协程池以及并发"></a>了解学习python中的协程池以及并发</h3>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug前置学习2</title>
      <link href="/2021/07/24/whosbug2/"/>
      <url>/2021/07/24/whosbug2/</url>
      
        <content type="html"><![CDATA[<h2 id="项目日志"><a href="#项目日志" class="headerlink" title="项目日志"></a>项目日志</h2><h2 id="2021-7-17"><a href="#2021-7-17" class="headerlink" title="2021/7/17"></a>2021/7/17</h2><p>有试着对CPP做一下AST解析以及将whosbug克隆到本地。有遇到如下问题：</p><h3 id="尝试对Cpp的AST解析"><a href="#尝试对Cpp的AST解析" class="headerlink" title="尝试对Cpp的AST解析"></a>尝试对Cpp的AST解析</h3><p>和对Java的一样，首先是用g4文件得到了CPP的Parser以及Lexer的python文件，发现与Java的显著不同的是CPP14Parser中没有compilationUnit，之后会再看看代码研究。</p><h3 id="whosbug"><a href="#whosbug" class="headerlink" title="whosbug"></a>whosbug</h3><p>在进行gitclone后有出现识别不到包的问题，一般情况下遇到这种问题首先是环境配置可能出了状况，但是再三检查下并没有发现不对的地方，最终用imoport sys print(sys.path)发现是没有识别到上级的路径，将whosbug_CI添加到环境变量中得以解决。<br><a href="http://www.manongjc.com/article/17094.html">解决方法</a></p><h2 id="2021-7-18"><a href="#2021-7-18" class="headerlink" title="2021/7/18"></a>2021/7/18</h2><h3 id="会议记录"><a href="#会议记录" class="headerlink" title="会议记录"></a>会议记录</h3><p>会议没有导师的参与，我们四个成员讨论了项目的学习内容以及相关困惑，分工问题决定之后再进行分配。</p><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><p>对whosbug插件的本地运行，有json文件读不到的问题。将command_line.py中的get_input函数改写得到解决。很奇怪的是，再pycharm中运行依然读不到包，只能选择在gitbash里运行。</p><pre class="line-numbers language-none"><code class="language-none">def get_input():    with open("input.json", "r", encoding="UTF-8") as f:        return json.load(f)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>被测库使用github中的MarkdownEditors，为java语言主写项目。运行生成了一个Sourcecode文件夹以及res.json文件，分别存放了java代码以及加密密文。</p><h2 id="2021-7-19"><a href="#2021-7-19" class="headerlink" title="2021/7/19"></a>2021/7/19</h2><h3 id="完成whosbug-service的本地部署。"><a href="#完成whosbug-service的本地部署。" class="headerlink" title="完成whosbug-service的本地部署。"></a>完成whosbug-service的本地部署。</h3><p>下载docker的windows版本：</p><p><a href="https://www.docker.com/">docker官网</a></p><p>检测是否安装成功：</p><p>输入docker —version与docker-compose —version</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/blogimages/test1.png?raw=true" alt="Image"></p><p>linux内核的准备：</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#step-4---download-the-linux-kernel-update-package">windows给的解决方案</a></p><p>成功后docker中的images界面：</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/blogimages/test2.png?raw=true" alt="Image"></p><p>API doc：</p><p><img src="https://github.com/RickDamon/RickDamon.github.io/blob/master/medias/blogimages/test3.png?raw=true" alt="Image"></p><h2 id="2021-7-20"><a href="#2021-7-20" class="headerlink" title="2021/7/20"></a>2021/7/20</h2><p>登入服务器看了下环境，装了git和docker，把项目代码和一个被测仓库放了进去。</p><p>大家开会讨论了下学习内容和之后的任务分配问题。</p><h2 id="2021-7-21"><a href="#2021-7-21" class="headerlink" title="2021/7/21"></a>2021/7/21</h2><p>了解了一下什么是csrf和django</p><p>读g4生成的python环境下的parser和lexer，根据已有的java文件做了一点cpp的解析。</p>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whosbug项目的初步认识</title>
      <link href="/2021/07/17/whosbug1/"/>
      <url>/2021/07/17/whosbug1/</url>
      
        <content type="html"><![CDATA[<h2 id="项目日志"><a href="#项目日志" class="headerlink" title="项目日志"></a>项目日志</h2><p>目前属于项目开完会进行学前任务的时期，主要是对whosbug已有代码的阅读和补充下编译原理的知识。</p><p>在会议期间导师主要介绍的项目内容是需要让whosbug适配更多的语言，解决接入大型项目的冷启动(Cold Start)问题以及分片分析问题。</p><h3 id="AST解析适配更多语言"><a href="#AST解析适配更多语言" class="headerlink" title="AST解析适配更多语言"></a>AST解析适配更多语言</h3><p>项目需要优先适配Cpp，Object C，Swift以及kotlin语言，目前看来已经基本完成了对Java语言的AST解析，antlr4中对语言进行解析首先需要用到g4文件，应是需要多次用到antlr4的官方g4收录库以完成对项目要求语言的适配。</p><ul><li><p><a href="https://github.com/antlr/grammars-v4">antlr4官方g4文件库</a></p></li><li><p><a href="https://github.com/antlr/antlr4">antlr4 github主页</a></p></li></ul><h3 id="Cold-Start"><a href="#Cold-Start" class="headerlink" title="Cold Start"></a>Cold Start</h3><p>冷启动一般指新项目进入内容平台时的问题，目前whosbug主要接入了NewMonkey项目，今后可以根据常用的解决冷启动问题的方式进行处理。</p><h3 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h3><p>分片技术可以提高数据库的性能，在区块链中经常使用。数据分片在某些情况下较为复杂，但whosbug的数据应该都比较偏向结构化，分片以及之后的结果碎片不会过于难以维护。</p>]]></content>
      
      
      
        <tags>
            
            <tag> whosbug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的文档注释</title>
      <link href="/2021/07/10/about-javadoc/"/>
      <url>/2021/07/10/about-javadoc/</url>
      
        <content type="html"><![CDATA[<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p>JDK中包含一个叫做javadoc的工具，可以由源文件生成一个HTML文档。若在源代码中添加以特殊定界符/**开始的注释，也可以很容易的生成一个看上去比较专业的文档。这种方法的好处在于，将代码和注释放在一个地方，在修改源码的同时，重新运行javadoc就可以轻松的保持两者的一致性。</p><h2 id="注释的插入"><a href="#注释的插入" class="headerlink" title="注释的插入"></a>注释的插入</h2><p>javadoc实用工具从模块，包，公共类与接口，公共的和受保护的字段，公共的和受保护的构造器及方法中抽取信息。</p><p>可以为上面各个特性编写注释，注释放置在所描述特性的前面，注释将以/<em>*开始，且以</em>/结束。</p><p>每个/<em>*…</em>/文档注释包含标记以及之后紧跟着的自由格式文本。标记以@开始，比如@since或@param。</p><p>自由格式文本的第一句应该是一个概要性的句子，javadoc工具自动的将这些句子抽取出来生成概要页。</p><p>在自由格式文本中，可以使用HTML修饰符 例：<br> </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">用于强调的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>着重强调的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>用于项目符号列表的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>及用于包含图像的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span>等如要键入宽代码，需使用{@code ... }而非<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>code</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>code</span><span class="token punctuation">&gt;</span></span>。这样就不用操心对代码中的&lt;进行字符转义了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h2><p>类注释必须要放在import语句之后和类定义之前。<br>我们举一个例子</p> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">/*<span class="token italic"><span class="token punctuation">*</span><span class="token content"> </span><span class="token punctuation">*</span></span> A {@code Card} object represents a playing card,such <span class="token list punctuation">*</span> as "Queen of Hearts". A card has a suit (Diamond , He <span class="token list punctuation">*</span> art, Spade or Club) and a value */public class Card{   ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事实上没必要在每行的开始都添加星号<em>，不过大部分的IDE会自动提供星号</em>，而且换行改变时，还会重新放置星号。</p><h2 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h2><p>每个方法的注释都要放在所描述方法之前。除了通用标记之外，还可用下列标记：</p><p>  @param variable description<br>      这个标记将给当前方法的参数（parameters）部分添加一个条目，此描述可以占据多行，且可以使用HTML标记。一个方法的所有@param必须放在一起<br>  @return description<br>      这个标记将给当前方法添加返回（returns）部分。这个描述可以跨多行，同样的，可以使用HTML标记。<br>  @throws class description<br>      这个标记将添加一个注释，表示此方法可能会抛出异常。</p><p>下面是一个方法注释的案例：<br> </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">/*<span class="token italic"><span class="token punctuation">*</span><span class="token content"> </span><span class="token punctuation">*</span></span> Raises the salary of an employee. <span class="token list punctuation">*</span> @param byPercent the percentage by which to raise the salary (e.g., 10 means 10%) <span class="token list punctuation">*</span> @return the amount of the raise <span class="token italic"><span class="token punctuation">*</span><span class="token content">/public double raiseSalary(double byPercent){    double raise = salary </span><span class="token punctuation">*</span></span> byPercent / 100;    salary += raise;    return raise;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="字段注释"><a href="#字段注释" class="headerlink" title="字段注释"></a>字段注释</h2><p>只需对公共字段（通常为静态变量）建立文档。如：<br>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">/*<span class="token italic"><span class="token punctuation">*</span><span class="token content"> </span><span class="token punctuation">*</span></span> The "Hearts" card suit */public static final int HEARTS = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p></p><h2 id="通用注释"><a href="#通用注释" class="headerlink" title="通用注释"></a>通用注释</h2><p>标记@since text将会建立一个“since”条目。text是可以引入这个特性的版本的任何描述。 例如，@since 1.7.1 。</p><p>下面的标记可以用在类文档的注释中：</p><p>   @author name<br>      此标记将产生一个“author”条目。可以使用多个@author标记，每个@author标记就对应了一个作者。<br>   @version text<br>      此标记将产生一个版本条目，这里的文本可以是对当前版本的任何描述。</p><p>通过@see和@link的标记，可以使用超链接，链接到javadoc的相关部分以及外部文档。</p><p>标记@see reference将在“see also”（参见）部分增加一个超链接。它可以用于类中，也可以用于方法中。这里的reference有下面三个选择：<br>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">package.class#feature label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>"text"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>我们用第一种情况举一个例子。<p></p><p>@see com.horstmann.corejava.Employee#raiseSalary(double)</p><p>这样我们就建立了一个到com.horstmann.corejava.Employee的raiseSalary(double)方法的超链接。在此处可以省略报名，甚至是报名和类名都省去，省去后就会位于当前的包或者类中。需要注意一定要使用井号（#）而非（.）来分割类名和方法名，或者类名和变量名。Java编译器自身可以熟练的确定句点在分隔包、子包、类、内部类与方法和变量时的不同含义。但是javadoc没有这么聪明，需要用#对他提供帮助。</p><p>在第二种情况下，如果@see标记之后有一个&lt;字符，那么就需要指定一个超链接，可以链接到任何URL。例如<br>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">@see <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>www.horstmann.com/corejava.html<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>The Core Java home page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>在上述情况下，都可以指定一个label（标签）作为链接锚（link anchor）。若省略了标签，则用户看到的锚就是目标代码名或者URL。<p></p><p>在第三种情况下，如果@see后有一个双引号（“）字符，文本就会显示在”see also“部分。例如：<br>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">@see "Core Java 2 volume 2"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>可以为一个特性添加多个@see标记，但必须把它们放在一起。<p></p><p>如果你愿意，可以在文档注释中的任何位置放置指向其他类或方法的超链接。可以在注释中任何位置插入一个形式如下的特殊标记：<br>  </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">{@link package.class#feature label}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p><h2 id="包注释"><a href="#包注释" class="headerlink" title="包注释"></a>包注释</h2><p>可以直接将类、方法和变量的注释放在Java源文件中，是要用/<em>*…</em>/文档注释界定就可以。但是要产生包注释就需要在每一个包目录中添加一个单独的文件。可以有如下两种选择：</p><p>1.提供一个名为package-info.java的Java文件。这个文件须包含一个初始的以/<em>*和</em>/界定的javadoc注释。后面是一个package语句。它不能包含更多的代码和注释。<br>2.提供一个名为package.html的HTML文件。会抽取标记...间的所有文本。</p><h1 id="注释提取"><a href="#注释提取" class="headerlink" title="注释提取"></a>注释提取</h1><p>在此，如果你希望HTML文件将放在名为docDirectory的目录下，执行如下步骤：</p><p>1.切换到包含你想要生成文档的源文件的目录。如果有嵌套的包想要生成文档，例如com.horstmann.corejava，就必须切换到包含子目录com的目录。</p><p>2.如果是一个包，则运行如下命令：</p><p>   javadoc -d docDirectory nameOfPackage</p><p>或者，如果要为多个包生成文档，运行：</p><p>   javadoc -d docDirectory nameOfPackage1 nameOfPackage2 …</p><p>若文件处于无名的包中，则运行：</p><p>   javadoc -d docDirectory *.java</p><p>如若在上述操作中省略了 -d docDirectory选项，那么HTML文件就会被提取到当前目录下，这样的结果就是可能比较混乱。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_learning_3</title>
      <link href="/2021/07/02/java-learning-3/"/>
      <url>/2021/07/02/java-learning-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Java核心技术卷一-学习笔记（3）"><a href="#Java核心技术卷一-学习笔记（3）" class="headerlink" title="Java核心技术卷一 学习笔记（3）"></a>Java核心技术卷一 学习笔记（3）</h3><p>本次的内容主要为Java中的对象和类，对于有经验的C++程序员来说，对本文不会感到陌生，但毕竟语言存在着很多不同之处，仍需对本章的内容进行较为详细的阅读。</p><h2 id="面向对象程序设计的概述"><a href="#面向对象程序设计的概述" class="headerlink" title="面向对象程序设计的概述"></a>面向对象程序设计的概述</h2><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>类是构造对象的模板或者蓝图，可以将类想象成做曲奇饼的模具，将对象想象为曲奇饼。由类构造对象的过程则称之为创建类的实例。</p><p>在前文中由看到，用Java编写的所有的代码都是位于某个类中，标准的Java库中提供了几千个类，可用于各种目的，如用户界面设计、日历、日期和网络编程等，当然这些类不可能满足所有的需要，所以还是需要创建一些自己的类，来描述我们应用程序所对应问题的对象。</p><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>封装是一个处理对象的重要概念，从形式上而言，封装就是将数据和行为组合在一个包里，并对对象的使用者隐藏具体的实现方式，对象的数据称为实例字段，操作数据的过程称之为方法，作为一个类的实例，特定对象都有一组特定的实例字段值，这些值的集合就是这个对象当前的状态。实现封装的关键在于，不能让类中的方法直接访问其他类的实例字段，程序只能通过对象的方法与对象数据进行交互。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>事实上，所有的Java类都源自于一个超类，就是Object，所有的其他类都扩展自这个类。在扩展一个已有的类时，这个扩展后的新类拥有被扩展的类的全部属性以及方法，你只需在新类中提供适用于这个新类的新方法和数据字段即可。通过扩展一个类来建立另外一个类的过程我们称之为继承。</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><p>首先，我们要清楚对象的三个主要特性：<br>1.对象的行为——可以对对象完成哪些操作，应用哪些方法？<br>2.对象的状态——当调用那些方法时，对象的响应如何?<br>3.对象的标识——如何区分具有相同行为与状态的不同对象？</p><p>对象的这些关键特性会彼此相互影响。对象的行为是用可调用的方法来定义的。每个对象都保存描述当前状况的讯息，这就是对象的状态。而状态不能完全的描述一个对象，每个对象都有唯一的标识。</p><h1 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h1><p>在类之间最常见的关系有依赖（uses-a），聚合（has-a）和继承（is-a）关系。<br>如果一个类的方法使用或操纵另一个类的对象，我们就称之为一个类依赖于另一个类。我们在设计程序时，应尽量可能的将相互依赖的类减至最少，用软件工程的术语就是减少类之间的耦合。<br>聚合很容易理解，意味着类A的对象包含类B的对象。<br>继承则表示一个更特殊的类与一个较为一般的类间的关系，一般情况下，特殊的类会继承于较为一般的类。</p><h2 id="使用Java中预定义的类"><a href="#使用Java中预定义的类" class="headerlink" title="使用Java中预定义的类"></a>使用Java中预定义的类</h2><p>实际上在Java语言中，没有类你将寸步难行，我们曾在前几节提到Math类，我们可以直接使用Math类中的方法，而忽略他是如何实现的，其中Math.random方法，不必了解他的具体实现，只需知道方法名和参数即可，这便是封装的关键所在，所有的类都是这样。</p><h1 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h1><p>使用对象前必须要构造对象并指定他的初始状态，然后对对象应用方法。</p><p>在Java语言中我们需使用构造器构造新实例。构造器实际上是一种特殊的方法，用来构造并初始化对象。我们来构造一个Java中存在的用来表示时间的类Date。如下所示。<br> </p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">new Date()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>这个表达式构造了一个新对象，初始化为当前的日期和时间。我们可以将对象直接传递给一个方法。<br> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">System.out.println(new Date());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>在上面这个例子中，我们构造的对象仅仅使用了一次，通常你希望你的对象可以多次使用，因此我们需要将其存放在一个变量中。<br> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Date birthday = new Date();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>在对象与对象变量之间有一个重要的区别。<br> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Date deadline;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>我们用以上语句定义了一个对象变量deadline，可以用来引用Date类型的对象，但是，变量deadline并不是一个对象，实际上他也没有引用任何对象，此时我们不能在这个变量上使用任何的Date方法。<br> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">s = deadline.toString()//error;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>以上的语句将产生编译错误<br>我们要初始化对象deadline才能去使用它。<br> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">deadline = new Date();deadline = birthday;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>我们用了初始化和引用其他对象两种方法让他可以使用。<br>在Java语言中，任何对象的值都是对另一个地方的某个对象的引用。<br>很多人错误的认为Java中的对象变量相当于C++中的引用，实际上C++中并没有null引用，且引用不能赋值，我们可以把Java中的对象变量看作类似于C++中的对象指针。<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Date birthday = new Date();//JavaDate* birthday = new Date();//C++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>而且所有的Java对象都储存在堆中，当一个对象包含另一个对象变量时，他只是包含着另一个堆对象的指针。<p></p><h1 id="类库中的LocalDate类"><a href="#类库中的LocalDate类" class="headerlink" title="类库中的LocalDate类"></a>类库中的LocalDate类</h1><p>书中使用了LocalDate类对Java预定义类的使用进行了更详细的描述。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">LocalDate newYearsEve = LocalDate.of(2020, 12 , 31);int year = newYearsEve.getYear(); //2020int month = newYearsEve.getMonthValue(); //12int day = newYearsEve.getDayOfMonth(); //12LocalDate aThousandDaysLater = newYearsEve.plusDays(1000);year = aThousandDaysLater.getYear() //2022<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>我们看到上述代码的方法名较为复杂，而实际上在编译器中你只需要打个.各种方法就会自己出来任由你选择，Java丰富的预定义类和方法调用是它能够经久不衰的一大原因。<p></p><h2 id="用户自定义类"><a href="#用户自定义类" class="headerlink" title="用户自定义类"></a>用户自定义类</h2><p>我们用一个简单的Employee类来对自定义类的使用进行详细的描述。以下代码就行了这个类的构造和使用。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">import java.time.*;public class EmployeeTest{   public static void main(String[] args)   {      // fill the staff array with three Employee objects      Employee[] staff = new Employee[3];<span class="token code keyword">      staff[0] = new Employee("Carl Cracker", 75000, 1987, 12, 15);      staff[1] = new Employee("Harry Hacker", 50000, 1989, 10, 1);      staff[2] = new Employee("Tony Tester", 40000, 1990, 3, 15);</span><span class="token code keyword">      // raise everyone's salary by 5%      for (Employee e : staff)         e.raiseSalary(5);</span><span class="token code keyword">      // print out information about all Employee objects      for (Employee e : staff)         System.out.println("name=" + e.getName() + ",salary=" + e.getSalary() + ",hireDay="             + e.getHireDay());</span>   }}class Employee{   private String name;   private double salary;   private LocalDate hireDay;   public Employee(String n, double s, int year, int month, int day)   {      name = n;      salary = s;      hireDay = LocalDate.of(year, month, day);   }   public String getName()   {      return name;   }   public double getSalary()   {      return salary;   }   public LocalDate getHireDay()   {      return hireDay;   }   public void raiseSalary(double byPercent)   {      double raise = salary * byPercent / 100;      salary += raise;   }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>首先在这个程序中我们构造了一个Employee数组，填入了三个Employee对象<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Employee[] staff = new Employee[3];staff[0] = new Employee("Carl Cracker", 75000, 1987, 12, 15);staff[1] = new Employee("Harry Hacker", 50000, 1989, 10, 1);staff[2] = new Employee("Tony Tester", 40000, 1990, 3, 15);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>接下来用了Employee类中的raiseSalary方法良心的将每个人的薪水提高5%，用到了foreach循环结构。<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">// raise everyone's salary by 5%for (Employee e : staff)   e.raiseSalary(5);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>而后调用了getName方法，getSalary方法以及getHireDay方法打印哥哥员工的信息：<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">      // print out information about all Employee objectsfor (Employee e : staff)   System.out.println("name=" + e.getName() + ",salary=" + e.getSalary() + ",hireDay="       <span class="token list punctuation">+</span> e.getHireDay());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>我们在这个程序中包含了Employee类和public修饰的EmployeeTest类，其中EmployeeTest包含了main方法。<br>源文件为EmployeeTest.java，文件名必须与public类的名字相匹配，在一个源文件中只能有一个公共类。<p></p><p>当我们编译这段代码时会产生两个类文件：Employee.class和EmployeeTest.class，可以将程序中baohanmain方法的类名提供给字节码解释器来启动程序。<br>即java EmployeeTest</p><h1 id="分析Employee类"><a href="#分析Employee类" class="headerlink" title="分析Employee类"></a>分析Employee类</h1><p>这个类中包含了一个构造器以及四个方法：<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public Employee(String n, double s, int year, int month, int day)public String getName()public double getSalary()public LocalDate getHireDay()public void raiseSalary(double byPercent)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>类中的方法标记为public，我们上文中说到一个java文件中只能有一个公共类，要与这里的方法区分开。关键字public意味着任何类的任何方法都可以调用这些方法。<br>接下来看类中如何存放要操作的数据：<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">private String name;private double salary;private LocalDate hireDay;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>关键字private和C++中一样，确保只有类自身的方法能访问这些实例字段。<p></p><h1 id="构造器分析"><a href="#构造器分析" class="headerlink" title="构造器分析"></a>构造器分析</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">   public Employee(String n, double s, int year, int month, int day){   name = n;   salary = s;   hireDay = LocalDate.of(year, month, day);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造器与类同名，构造器括号中包括了要传入的参数，传入相应参数后在构造器中将会给相应的变量赋值。<br>有几个关键点需要注意：构造器与类同名；每个类可以有一个以上的构造器；构造器可以有任意个参数；构造器无返回值；构造器伴随new一起调用。</p><p>Java构造器的工作方式与C++一样，但是所有的Java对象都是在堆中构造的。</p><p>注意不要在构造器中定义与实例字段相同名字的局部变量<br>例如：<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">   public Employee(String n, double s){   String name = n;   double salary = s; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在这个构造器中声明了局部变量name和salary，这些变量是只可以在构造器内部访问的，会屏蔽掉所有的同名实例字段。<p></p><h1 id="用var声明局部变量"><a href="#用var声明局部变量" class="headerlink" title="用var声明局部变量"></a>用var声明局部变量</h1><p>我们可以从变量的初始值推导出它的类型，可以用var关键字声明局部变量无须指定类型。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Employee harry = new Employee("Harry", 50000, 1989, 12, 31);var harry = new Employee("Harry", 50000, 1989, 12, 31);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>上文中的两个代码实现了同样的功能。<p></p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>Java中可以使用包将类组织在一个集合中，借助包可以方便的组织自己的代码。</p><h1 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h1><p>使用包的主要原因是确保类名的唯一性，若两程序员都建立了Employee类，只要将他们放在不同的包中，就不会冲突。</p><h1 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h1><p>我们可采用两种方式访问一个包中的公共类，第一种就是完全限定名称，包后面跟着类名。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">java.time.LocalDate today = java.time.LocalDate.now();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>这显然很繁琐，更常用的就是使用import语句，如我们常见的<br><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">import java.time.*;LocalDate today = LocalDate.now();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p></p><h1 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h1><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">import static java.lang.System.*;out.println("haha");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这种方法并不常用，但是可以使程序更为简洁。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_learning_1</title>
      <link href="/2021/06/26/java-learning-1/"/>
      <url>/2021/06/26/java-learning-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Java核心技术一卷学习笔记（1）"><a href="#Java核心技术一卷学习笔记（1）" class="headerlink" title="Java核心技术一卷学习笔记（1）"></a>Java核心技术一卷学习笔记（1）</h3><p>课内关于Java学习的内容安排过于少且仓促，俗话说大学都是师傅领进门，修行靠个人，为加强Java语言的编程以及Debug能力，用Java核心技术卷一二以及深入理解Java虚拟机来补充相应知识空缺。</p><h3 id="第一章-Java程序设计概述"><a href="#第一章-Java程序设计概述" class="headerlink" title="第一章 Java程序设计概述"></a>第一章 Java程序设计概述</h3><p>本章是对Java语言的引入介绍，这里放上Java程序设计者对于其设计初衷以及完成情况的白皮书 <a href="www.oracle.com/technetwork/java/langenv-140151.html">Java white paper</a><br>关于关键数术语的概述 <a href="http://horstmann.com/corejava/java-an-overview/7Gosling.pdf">key words</a> </p><p>Java的十一个关键术语为：</p><h1 id="简单性"><a href="#简单性" class="headerlink" title="简单性"></a>简单性</h1><p>此处主要是相对C++语言来说，Java的设计者们希望构建一个无需深奥的专业训练就可以进行编程的系统，且符合当今的标准惯例，Java提出了C++中很多较少使用，且难以处理的、容易被混淆的特性。</p><p>Java语法可以理解为C++语法的一个纯净版本，没有头文件，指针操作，结构，联合，操作符重载，虚基类等待。当然也有一些不适当特性的存在，比如switch语法在Java没有什么改变。</p><p>简单的另一个方面便是小，Java设计者希望Java可以支持开发能够在小型机器上独立运行的软件，在发布时，基本的解释器以及类支持大约为40KB，加上标准类库以及线上支持，大约需要增加170KB，这在当时已经是一个不错的成就。</p><h1 id="Java的面向对象"><a href="#Java的面向对象" class="headerlink" title="Java的面向对象"></a>Java的面向对象</h1><p>在设计者开发Java语言时，面向对象技术已经很成熟，Java面向对象的特性与C++旗鼓相当，Java与其不同点在于多重继承，Java中使用了更简单的接口概念。Java也提供了更丰富的运行时自省功能。</p><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p>Java由一个丰富的例程库支持处理像HTTP和FTP类的TCP/IP协议。</p><p>Java应用程序可通过URL打开和访问网络上的对象。</p><h1 id="健壮性"><a href="#健壮性" class="headerlink" title="健壮性"></a>健壮性</h1><p>Java因为取消了指针的使用，采用指针模型，消除了重写内存和损坏数据的可能性。</p><h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><p>从一开始Java就可以防范类似于运行时堆栈溢出（蠕虫和病毒常用手段），破坏自己的进程空间之外的内存，未经授权读写文件等问题。 </p><p>不可信代码在一个沙河环境中执行，不会影响主系统。</p><h1 id="体系结构中立"><a href="#体系结构中立" class="headerlink" title="体系结构中立"></a>体系结构中立</h1><p>因为Java虚拟机的存在，编译器生成一个体系结构中立的目标文件格式，可在多种处理器上运行。</p><h1 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h1><p>在Java中，数值类型有固定的字节数，消除了代码移植时的主要问题，字符串通过Unicode格式存储。</p><h1 id="解释性"><a href="#解释性" class="headerlink" title="解释性"></a>解释性</h1><p>Java解释器可以在任何抑制了解释器的机器上直接执行Java字节码。</p><h1 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h1><p>字节码可以在运行时动态的转换成对应运行这个应用特定CPU的机器码</p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>Java是第一个支持并发设计的主流语言。</p><h1 id="动态性"><a href="#动态性" class="headerlink" title="动态性"></a>动态性</h1><p>Java库中可以自由添加新方法和实例变量，而对客户端没影响。</p><h3 id="Java语言发展简史"><a href="#Java语言发展简史" class="headerlink" title="Java语言发展简史"></a>Java语言发展简史</h3><p>Java的历史要追溯到1991年，由Patrick Naughton和James Gosling（一个全能的计算机奇才，Sun公司会士）带领的Sun公司的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器（CPU），因此很重要的一点是这种语言不应与任何特定的体系结构绑定。这个项目被命名为“Green”。</p><p>代码短小、紧凑且与平台无关，这些要求促使开发团队设计出一个可移植的语言，可以为虚拟机生成中间代码。</p><p>不过，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础，而不是Lisp、Smalltalk或Pascal。不过，就像Gosling在专访中谈道：“毕竟，语言只是实现目标的工具，而不是目标本身。”Gosling把这种语言称为“Oak”（这么起名大概是因为他非常喜欢自己办公室窗外的一棵橡树）。Sun公司的人后来发现，Oak是一种已有的计算机语言的名字，于是，将其改名为Java。事实证明这是一个很有灵感的选择。</p><p>1992年，Green项目发布了它的第一个产品，称之为“*7”。这个产品可以提供非常智能的远程控制。遗憾的是，Sun公司对生产这个产品并不感兴趣，Green项目组的人员必须找出其他的方法来将他们的技术推向市场。然而，仍然没有任何一家标准消费品电子公司对此感兴趣。于是，Green项目组投标了一个设计有线电视盒的项目，它能提供视频点播等新型有线服务，但他们没能拿到这个合同（有趣的是，得到这个项目的公司的领导恰恰是开创Netscape公司的Jim Clark。Netscape公司后来对Java的成功给予了很大的帮助）。</p><p>Green项目（这时换了一个新名字—“First Person公司”）在1993年一整年以及1994年的上半年，一直在苦苦寻求买家购买他们的技术。然而，一个也没有找到（Patrick Naughton—项目组的创始人之一，也是完成大多数营销工作的人，声称为了销售这项技术，已累计飞行了300000英里）。1994年First Person公司解散了。</p><p>当这一切在Sun公司发生的时候，Internet的万维网也在日渐发展壮大。万维网的关键是浏览器把超文本页面转换到屏幕上。1994年大多数人都在使用Mosaic，这是1993年出自伊利诺伊大学超级计算中心的一个非商业化的Web浏览器（Mosaic的一部分是由Marc Andreessen编写的。当时，他作为一名参加半工半读项目的本科生，编写了这个软件，每小时的薪水只有6.85美元。他后来成了Netscape公司的创始人之一和技术总监，可谓名利双收）。</p><p>在接受SunWorld采访的时候，Gosling说，在1994年中期，Java语言的开发者意识到：“我们能够建立一个相当酷的浏览器。在客户/服务器主流框架中，浏览器恰好需要我们已经完成的一些工作：体系结构中立、实时、可靠、安全—这些问题在工作站环境并不太重要，所以，我们决定开发浏览器。”</p><p>实际的浏览器是由Patrick Naughton和Jonathan Payne开发的，并演变为HotJava浏览器。HotJava浏览器采用Java编写，以炫耀Java语言超强的能力。这个浏览器能够在网页中执行内嵌的Java代码。这一“技术证明”在1995年5月23日的SunWorld’95大会上展示，同时引发了人们延续至今的对Java的狂热追逐。</p><p>1996年年初，Sun发布了Java的第1个版本。人们很快地意识到Java 1.0不能用来进行真正的应用开发。的确，可以使用Java 1.0来实现在画布上随机跳动的神经质的文本applet，但它却没有提供打印功能。坦率地说，Java 1.0的确没有为其黄金时期的到来做好准备。后来的Java 1.1弥补了其中的大多明显的缺陷，大大改进了反射能力，并为GUI编程增加了新的事件处理模型。不过它仍然有很大的局限性。</p><p>1998年JavaOne会议的头号新闻是即将发布Java 1.2版。这个版本将早期玩具式的GUI和图形工具包代之以复杂而且可伸缩的工具包。在1998年12月Java 1.2发布仅3天之后，Sun公司市场部将它改名为更加吸引人的“Java 2标准版软件开发包1.2版”。</p><p>除了“标准版”（Standard Edition）之外，Sun公司还推出了两个其他的版本：一个是用于手机等嵌入式设备的“微型版”（Micro Edition）；另一个是用于服务器端处理的“企业版”（Enterprise Edition）。本书主要介绍标准版。</p><p>标准版的1.3和1.4版本对最初的Java 2版本做出了增量式的改进，提供了不断扩展的标准类库，提高了性能，当然，还修正了一些bug。在此期间，原先对Java applet和客户端应用的炒作逐渐消退，但Java则成为服务器端应用的首选平台。</p><p>5.0版是自1.1版以来第一个对Java语言做出重大改进的版本（这一版本原来定为1.5版，在2004年的JavaOne会议之后，版本号直接升至5.0）。经过了多年的研究，这个版本添加了泛型类型（generic type，大致相当于C++的模板），其挑战性在于添加这一特性而不需要对虚拟机做出任何修改。另外，受到C#的启发，还增加了几个很有用的语言特性：“for each”循环、自动装箱和注解。</p><p>版本6（没有后缀.0）于2006年年末发布。同样，这个版本没有对语言方面再进行修改，而是做了其他性能改进，并增强了类库。</p><p>随着数据中心越来越依赖于商业硬件而不是专用服务器，Sun公司终于沦陷，于2009年被Oracle收购。Java的开发停滞了很长一段时间。直到2011年Oracle发布了Java的一个新版本—Java 7，其中只做了一些简单的改进。</p><p>2014年，Java 8终于发布，在近20年中这个版本发生的改变最大。Java 8包含了一种“函数式”编程方式，可以很容易地表述并发执行的计算。所有编程语言都必须与时俱进，Java在这方面显示出了非凡的能力。</p><p>Java 9的主要特性要一直追溯到2008年。那时，Java平台的首席工程师Mark Reinhold开始着力分解这个庞大的Java平台。为此引入了模块，模块是提供一个特定功能的自包含的代码单元。设计和实现一个适用于Java平台的模块系统前后用了11年，而它是否也适用于Java应用和类库还有待观察。Java 9于2017年发布，它提供了另外一些吸引人的特性，我们将在本书中介绍这些特性。</p><p>从2018年开始，每6个月就会发布一个Java版本，以支持更快地引入新特性。某些版本（如Java 11）设计为长期支持的版本。</p><p>此部分先到这里。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_learning_2</title>
      <link href="/2021/06/26/java-learning-2/"/>
      <url>/2021/06/26/java-learning-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Java核心技术卷一-学习笔记（2）"><a href="#Java核心技术卷一-学习笔记（2）" class="headerlink" title="Java核心技术卷一 学习笔记（2）"></a>Java核心技术卷一 学习笔记（2）</h3><p>在书中的第二章节是Java编程环境的搭建以及jdk的下载，ide的配置等，这些内容基本没有什么好说的，直接看第三章的Java基本的程序设计结构，这章的内容实际上是比较关键的，虽然看似较为简单，但涉及到了java语言的基本规范，编译过程，数据类型等，这些东西每个语言都有所区别，不能因为有一定基础就跳过或略读。</p><h2 id="最简单的Java程序分析"><a href="#最简单的Java程序分析" class="headerlink" title="最简单的Java程序分析"></a>最简单的Java程序分析</h2><p>下面贴一最简单的Java程序，只发送一条消息到控制台</p> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public class FirstSample{    public static void main(String[] args)    {         System.out.println("We will not use 'hello world!' ");    }}   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个程序虽然很简单，但如我们所知，所有Java程序都有此结构，现在我们逐行来细细研究一下：</p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>关键字public称为访问修饰符（access modifier），用于控制程序的其他部分对这段代码的访问级别，和C++中类中的定义是十分相似的。而关键字class表明<br>了Java程序中全部内容都包含在类中，在Java语言中，类是构建所有Java程序和applet的构建块，Java的全部内容都需放在类中。</p><p>class后跟类名。Java中类名的定义必须由字母开头，后面可以跟字母和数字的组合，长度没有什么限制，但不能用Java的保留字。</p><p>Java类的标准命名规范为<a href="https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95/7794053?fr=aladdin">骆驼命名法</a> </p><p>Java中源代码的文件名必须与公共类的名字相同，并且使用.java作为扩展名。</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>在编译过程中，以上面程序为例，在编译这段代码之后会得到一个包含这个类字节码的文件，java编译器会将字节码文件命名为FirstSample.class，并存储在源文件的同一目录下，编译完后可以使用 java FirstSample运行此程序，当然运行结果会是一段我们输入的字符。</p><h2 id="java中的一些规范"><a href="#java中的一些规范" class="headerlink" title="java中的一些规范"></a>java中的一些规范</h2><p>运行已编译的程序时，Java虚拟机总是会从指定的类中的main方法的代码开始执行，所以在类的源文件中必须有一个main方法，且根据(Java语言规范)[<a href="http://docs.oracle.com/javase/specs]。">http://docs.oracle.com/javase/specs]。</a></p><p>main方法必须声明为public。</p><p>在Java语言中，和在C++中一样，用大括号来划分程序部分。</p><p>作为学习过C++程序的一员，对Java类的理解应该会好理解一下，Java的所有函数都是某个类的方法。因此，Java的main方法必须有一个shell类。</p><p>Java中的main方法必须是静态的，void类型表示没有返回值，所以不用返回退出码。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">public static void main(String[] args)   {        System.out.println("We will not use 'hello world!' ");   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>现在对这个语句进行研究：<p></p><p>在这里我们使用了System.out对象且调用了它的println方法。注意，点号（.）用于调用方法，Java中通用的调用为object.method(parameters)。和C++一样，都是用双引号界定字符串。注释也是很类似的。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>Java中有八种基本的数据类型，其中4种整型，2种浮点类型，一种字符类型char，和判断值boolean类型。</p><h1 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h1><p>Java中提供了四种整型，即int，short，long，byte，其中int类型最为常用，而要表达地球人口这样的较大数就需要用到long类型，而byte和short常用于特定的场合，比如底层文件处理或者存储空间很宝贵的大数据。</p><p>在C和C++中，int和long等类型的大小与目标平台相关。而Java中所有数值类型所占字节数与平台无关。且Java没有任何unsigned的int，long，short或byte类型。</p><h1 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h1><p>Java中有两种浮点类型为float和double分别占4字节和8字节。double所表示的数值精度为float的两倍。</p><p>浮点数不适用于无法接受舍入误差的金融运算，如果在数值计算中不允许有任何舍入误差，应使用BigDecimal类。</p><h1 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h1><p>此类型原本用于表示单个字符，不过在如今有些Unicode字符可以用一个char值来描述，有些则需两个char值。</p><p>char类型的字面量值要用单引号括起来，例如’A’为编码值为65的字符常量。与”A”不同，这是一个包含字符A的字符串。</p><h1 id="Unicode和char类型"><a href="#Unicode和char类型" class="headerlink" title="Unicode和char类型"></a>Unicode和char类型</h1><p>Unicode打破了传统的字符编码机制的限制，在其出现之前各国有许多不同的标准，就产生了两个问题：</p><p>1.对于任意给定的代码值，在不同编码方案下可能对应不同的字母；</p><p>2.采用大字符集的语言其编码长度可能有所不同。</p><p>设计Unicode的初衷便是要解决这些问题。当时人们认为两个字节的代码宽度足以对世界上任何语言的所有字符进行编码，但最终还是因为大量的汉语系文字<br>中的表意文字，目前16位的char类型已无法满足描述所有Unicode字符的需要。</p><h1 id="boolean类型"><a href="#boolean类型" class="headerlink" title="boolean类型"></a>boolean类型</h1><p>包括两个值true和false，来判定逻辑条件，整型和布尔值不能进行相互转换。</p><h2 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h2><p>和C++类似，Java也用变量来存储值，常量就是值不变的变量，通常会用final修饰。</p><h1 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h1><p>当变量的取值只在一个有限的集合内，可以自定义枚举类型。枚举类型包括有限个命名的值。<br></p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">enum Size { SMALL , MEDIUM , LARGE , EXRA_LARGE};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>之后会进行枚举类的详细介绍。<p></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p>此处与其他语言类似，而要注意使用strictfp关键字标记的方法必须使用严格的浮点运算来生成可再生的结果。</p><h1 id="数学函数与常量"><a href="#数学函数与常量" class="headerlink" title="数学函数与常量"></a>数学函数与常量</h1><p>在Math类中，包含了各种各样的数学函数。在编写不同类型的程序时，可能需要的函数也不同。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">double x = 4 ;double y = Math.sqrt(x) ;System.out.println(y) ; //prints 2.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上位Math应用的举例。使用更多其中的功能可参考Java对应版本的API文档。</p><h1 id="数值类型间的转换"><a href="#数值类型间的转换" class="headerlink" title="数值类型间的转换"></a>数值类型间的转换</h1><p>当用一个二元运算符连接两个值时，要将两操作数转为一种类型再进行计算。</p><h1 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h1><p>有时将double转为int时会丢失信息，这种转换要通过强制类型转换（cast）来完成，强制类型转换语法：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">double x = 4.99 ;int n = (int) x ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结合复制和运算符"><a href="#结合复制和运算符" class="headerlink" title="结合复制和运算符"></a>结合复制和运算符</h1><p>此处与C++类似，举个栗子，x+=4；大家大概就明白意思了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
